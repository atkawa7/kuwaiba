/*
 * Copyright (c) 2019 rchingal.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    rchingal - initial API and implementation and/or initial documentation
 */
package org.inventory.core.services.api.export;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.inventory.core.services.api.export.filters.TextExportFilter;
import org.inventory.core.services.api.export.filters.XMLExportFilter;
import org.inventory.core.services.i18n.I18N;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.Exceptions;

/**
 * All scene export filters must implement this interface
 *
 * @author Hardy Ryan Chingal Martinez {@literal <ryan.chingal@kuwaiba.org>}
 */
public class GenericExportPanel extends javax.swing.JPanel implements ActionListener {

    private String defaultFileName;
    private File exportable;
    private XMLExportFilter[] filters;

    /**
     * Creates new form GenericExportPanel
     */
    public GenericExportPanel(XMLExportFilter[] filters, String defaultFileName) {
        this.defaultFileName = defaultFileName;
        this.filters = filters;
        initComponents();
        initCustomComponents();
    }

    private void initCustomComponents() {

        for (XMLExportFilter filter : filters) {
            cmbExportTo.addItem(filter);
        }
        cmbExportTo.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                updateExtension(e.getSource());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtOutputFile = new javax.swing.JTextField();
        lblOutputFile = new javax.swing.JLabel();
        btnOutputFileSet = new javax.swing.JButton();
        lblExportTo = new javax.swing.JLabel();
        btnExportToSettings = new javax.swing.JButton();
        cmbExportTo = new javax.swing.JComboBox();

        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(349, 120));

        txtOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOutputFileActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblOutputFile, "Export To");

        org.openide.awt.Mnemonics.setLocalizedText(btnOutputFileSet, "...");
        btnOutputFileSet.setToolTipText("Select an output file");
        btnOutputFileSet.setPreferredSize(new java.awt.Dimension(24, 24));
        btnOutputFileSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputFileSetActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblExportTo, "Format");

        btnExportToSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/services/res/configure.png"))); // NOI18N
        btnExportToSettings.setToolTipText("Select an output file");
        btnExportToSettings.setPreferredSize(new java.awt.Dimension(24, 24));
        btnExportToSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToSettingsActionPerformed(evt);
            }
        });

        cmbExportTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbExportToActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblExportTo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbExportTo, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOutputFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnOutputFileSet, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExportToSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOutputFile)
                    .addComponent(txtOutputFile, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(btnOutputFileSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbExportTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblExportTo))
                    .addComponent(btnExportToSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );

        btnExportToSettings.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GenericExportPanel.class, "GenericExportPanel.btnExportToSettings.AccessibleContext.accessibleDescription")); // NOI18N
        btnExportToSettings.getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportToSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportToSettingsActionPerformed
        //XMLExportFilter selectedFilter = (XMLExportFilter) cmbExportTo.getSelectedItem();

        //if (selectedFilter.getExportSettingsPanel() != null) {
        //    DialogDescriptor dd = new DialogDescriptor(selectedFilter.getExportSettingsPanel(),
        //            I18N.gm("export_settings"), true, null);
        //    DialogDisplayer.getDefault().createDialog(dd).setVisible(true);
        //} else {
        //    JOptionPane.showMessageDialog(this, I18N.gm("no_advanced_settings_required"), I18N.gm("exporting"), JOptionPane.INFORMATION_MESSAGE);
        //}
    }//GEN-LAST:event_btnExportToSettingsActionPerformed

    private void txtOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutputFileActionPerformed

    private void btnOutputFileSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputFileSetActionPerformed

        JFileChooser fChooser = new JFileChooser();
        fChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fChooser.setDialogTitle(I18N.gm("select_directory"));

        if (fChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            txtOutputFile.setText(fChooser.getSelectedFile().getAbsolutePath()                                                            
                    + File.separator
                    + this.defaultFileName
                    + "_" + Calendar.getInstance().get(Calendar.DAY_OF_YEAR)
                    +//NOI18N
                    "-" + Calendar.getInstance().get(Calendar.MINUTE)
                    + //NOI18N
                    (((XMLExportFilter) cmbExportTo.getSelectedItem()).getExtension())); //NOI18N
        }
    }//GEN-LAST:event_btnOutputFileSetActionPerformed

    private void cmbExportToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbExportToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbExportToActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportToSettings;
    private javax.swing.JButton btnOutputFileSet;
    private javax.swing.JComboBox cmbExportTo;
    private javax.swing.JLabel lblExportTo;
    private javax.swing.JLabel lblOutputFile;
    private javax.swing.JTextField txtOutputFile;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == DialogDescriptor.OK_OPTION) {
            try {
                if (txtOutputFile.getText().trim().equals("")) {//NOI18N
                    JOptionPane.showMessageDialog(this, I18N.gm("invalid_file_name"), I18N.gm("error"), JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //XMLExportFilter selectedFilter = (XMLExportFilter) cmbExportTo.getSelectedItem();
                XMLExportFilter selectedFilter = XMLExportFilter.getInstance();
                if( selectedFilter.export(txtOutputFile.getText())){
                    JOptionPane.showMessageDialog(this, I18N.gm("save_file_successful"), I18N.gm("save_file_successful"), JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, I18N.gm("save_file_error"), I18N.gm("save_file_error"), JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }

    private void updateExtension(Object source) {
        if (!txtOutputFile.getText().trim().isEmpty()) {
            txtOutputFile.setText(
                    txtOutputFile.getText().substring(0, txtOutputFile.getText().lastIndexOf('.'))
                    + ((TextExportFilter) ((JComboBox) source).getSelectedItem()).getExtension());
        }
    }
}
