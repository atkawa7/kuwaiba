/*
 *  Copyright 2010-2017 Neotropic SAS <contact@neotropic.co>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */
package com.neotropic.inventory.modules.snmp;

import com.neotropic.inventory.modules.snmp.nodes.SyncGroupRootNode;
import org.inventory.core.services.api.behaviors.Refreshable;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.nodes.Node;

/**
 * Top component which displays Sync-Groups in SNMP Sync.
 * @author Adrian Martinez Molina <adrian.martinez@kuwaiba.org>
 */
@ConvertAsProperties(
        dtd = "-//com.neotropic.inventory.modules.snmp//SNMPSync//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SNMPSyncTopComponent",
        iconBase = "com/neotropic/inventory/modules/snmp/res/sync.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "com.neotropic.inventory.modules.snmp.SNMPSyncTopComponent")
@ActionReference(path = "Menu/Tools" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SNMPSyncAction",
        preferredID = "SNMPSyncTopComponent"
)
@Messages({
    "CTL_SNMPSyncAction=SNMPSync",
    "CTL_SNMPSyncTopComponent=SNMPSync Window",
    "HINT_SNMPSyncTopComponent=This is a SNMPSync window"
})
public final class SNMPSyncTopComponent extends TopComponent implements 
    ExplorerManager.Provider, Refreshable {

    private BeanTreeView treeMain;
    private final ExplorerManager em;
    
    public SNMPSyncTopComponent() {
        em = new ExplorerManager();
        initComponents();
        initCustomComponents();
        setName(Bundle.CTL_SNMPSyncTopComponent());
        setToolTipText(Bundle.HINT_SNMPSyncTopComponent());
    }
    
    public void initCustomComponents() {
        treeMain = new BeanTreeView();
        pnlScrollMain.setViewportView(treeMain);
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlScrollMain = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(pnlScrollMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane pnlScrollMain;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        em.setRootContext(new SyncGroupRootNode());
        ExplorerUtils.activateActions(em, true);
    }

    @Override
    public void componentClosed() {
        ExplorerUtils.activateActions(em, false);
        em.setRootContext(Node.EMPTY);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void refresh() {
        componentClosed();
        componentOpened();
    }
}
