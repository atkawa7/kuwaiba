/*
 *  Copyright 2010-2019 Neotropic SAS <contact@neotropic.co>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */
package org.inventory.customization.classhierarchy.importdb;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import org.inventory.communications.core.LocalClassMetadata;
import org.inventory.core.services.api.export.filters.XMLExportFilter;
import org.openide.DialogDescriptor;

/**
 *
 * @author Hardy Ryan Chingal Martinez {@literal <ryan.chingal@kuwaiba.org>}
 */
public class ImportPanel extends javax.swing.JPanel implements ActionListener, PropertyChangeListener {

    private File selectedFile;
    private List<LocalClassMetadata> rootElements;

    /**
     * Creates new form ImportPanel
     */
    public ImportPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFile = new javax.swing.JLabel();
        pbUpload = new javax.swing.JProgressBar();
        btnBrowseFile = new javax.swing.JButton();
        txtFileName = new javax.swing.JTextField();
        btnUpload = new javax.swing.JToggleButton();
        lblProgress = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(lblFile, "Choose a File:");

        org.openide.awt.Mnemonics.setLocalizedText(btnBrowseFile, "Browse");
        btnBrowseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseFileActionPerformed(evt);
            }
        });

        txtFileName.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(btnUpload, "Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblProgress, "Progress:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFile)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lblProgress)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBrowseFile))
                    .addComponent(pbUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40))
            .addGroup(layout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(btnUpload)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpload)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pbUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProgress))
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Reads file path and set extension
     *
     * @param evt
     */
    private void btnBrowseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseFileActionPerformed
        JFileChooser fChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        //file chooser properties
        XMLExportFilter xMLExportFilter = XMLExportFilter.getInstance();
        fChooser.setDialogTitle("Select one file");
        fChooser.setAcceptAllFileFilterUsed(false);
        fChooser.addChoosableFileFilter(new FileNameExtensionFilter(xMLExportFilter.getDisplayName(), xMLExportFilter.getExtensionFileChooser()));

        if (fChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {

            selectedFile = fChooser.getSelectedFile();
            txtFileName.setText(selectedFile.getName());
        }
    }//GEN-LAST:event_btnBrowseFileActionPerformed

    /**
     * First upload one file in memory, this process is a thread Second save
     * this structure into data base, this process is a thread
     *
     * @param evt
     */
    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        pbUpload.setValue(0);
        pbUpload.setIndeterminate(true);
        final PropertyChangeListener parent = this;

        FileReaderTask task = new FileReaderTask(selectedFile) {
            /**
             * Executed in Swing's event dispatching thread
             */
            @Override
            protected void done() {
                if (!isCancelled()) {
                    JOptionPane.showMessageDialog(null,
                            "File has been uploaded successfully!", "Message",
                            JOptionPane.INFORMATION_MESSAGE);
                    pbUpload.setIndeterminate(false);
                    pbUpload.setStringPainted(true);
                    pbUpload.setValue(0);

                    //create classs
                    CreateClassesTask task = new CreateClassesTask(this.getRoots()) {
                        /**
                         * Executed in Swing's event dispatching thread
                         */
                        @Override
                        protected void done() {
                            if (!isCancelled()) {
                                JOptionPane.showMessageDialog(null,
                                        "Process end successfully!", "Message",
                                        JOptionPane.INFORMATION_MESSAGE);

                            }
                        }
                    };
                    task.addPropertyChangeListener(parent);
                    task.execute();

                }
            }
        };

        task.execute();
    }//GEN-LAST:event_btnUploadActionPerformed

    /**
     * not yet implemented, default behavior close the window
     * 
     * @param ae
     */
    @Override
    public void actionPerformed(ActionEvent ae) {
        
    }

    /**
     * Places the progress of save into database in JProgressbar component
     *
     * @param pce
     */
    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        if ("progress".equals(pce.getPropertyName())) {
            int progress = (Integer) pce.getNewValue();
            pbUpload.setValue(progress);
        }

    }

    //getters and setters
    /**
     * @return the rootElements
     */
    public List<LocalClassMetadata> getRootElements() {
        return rootElements;
    }

    /**
     * @param rootElements the rootElements to set
     */
    public void setRootElements(List<LocalClassMetadata> rootElements) {
        this.rootElements = rootElements;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseFile;
    private javax.swing.JToggleButton btnUpload;
    private javax.swing.JLabel lblFile;
    private javax.swing.JLabel lblProgress;
    private javax.swing.JProgressBar pbUpload;
    private javax.swing.JTextField txtFileName;
    // End of variables declaration//GEN-END:variables

}
