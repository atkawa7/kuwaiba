/*
 *  Copyright 2010-2017 Neotropic SAS <contact@neotropic.co>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
package org.inventory.views.rackview;

import org.inventory.views.rackview.scene.RackViewScene;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JComponent;
import org.inventory.communications.core.LocalObjectLight;
import org.inventory.core.services.api.behaviors.Refreshable;
import org.inventory.core.visual.export.ExportScenePanel;
import org.inventory.core.visual.export.filters.ImageFilter;
import org.inventory.core.visual.export.filters.SceneExportFilter;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * TopComponent used to show a simple rack view or an inside rack view
 * @author Johny Andres Ortega Ruiz <johny.ortega@kuwaiba.org>
 */
public final class RackViewTopComponent extends TopComponent implements ActionListener, Refreshable {
    private RackViewScene scene;
    private LocalObjectLight rack;
    private RackViewService service;
    private JComponent satelliteView;
    
    public RackViewTopComponent(LocalObjectLight rack) {
        this();
        this.rack = rack;
        initCustomComponents();
        btnSelect.setEnabled(false);
        btnConnect.setEnabled(false);
        btnRackTableView.setEnabled(false);
        
        btnSelect.setSelected(true);
        setName("Rack View to " + rack.toString());
    }

    private RackViewTopComponent() {
        initComponents();
    }
    
    @Override
    protected String preferredID() {
        return "RackViewTopComponent_" + rack.getOid(); //NOI18N
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }
    
    private void initCustomComponents() {
        scene = new RackViewScene(rack);
        scene.addChangeListener(this);        
                
        associateLookup(scene.getLookup());
        pnlMainScrollPanel.setViewportView(scene.createView());
                        
        service = new RackViewService(scene, rack);                 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainScrollPanel = new javax.swing.JScrollPane();
        toolBarMain = new javax.swing.JToolBar();
        btnExport = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnShowConnections = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnSelect = new javax.swing.JToggleButton();
        btnConnect = new javax.swing.JToggleButton();
        btnRackTableView = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnRefresh = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());
        add(pnlMainScrollPanel, java.awt.BorderLayout.CENTER);

        toolBarMain.setRollover(true);
        toolBarMain.setMaximumSize(new java.awt.Dimension(392, 38));
        toolBarMain.setMinimumSize(new java.awt.Dimension(392, 38));
        toolBarMain.setPreferredSize(new java.awt.Dimension(392, 38));

        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/views/rackview/res/export.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnExport, org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnExport.text")); // NOI18N
        btnExport.setToolTipText(org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnExport.toolTipText")); // NOI18N
        btnExport.setFocusable(false);
        btnExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExportMouseClicked(evt);
            }
        });
        toolBarMain.add(btnExport);
        toolBarMain.add(jSeparator1);

        btnShowConnections.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/views/rackview/res/show_connection.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnShowConnections, org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnShowConnections.text")); // NOI18N
        btnShowConnections.setToolTipText(org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnShowConnections.toolTipText")); // NOI18N
        btnShowConnections.setFocusable(false);
        btnShowConnections.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShowConnections.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShowConnections.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnShowConnectionsMouseClicked(evt);
            }
        });
        toolBarMain.add(btnShowConnections);
        toolBarMain.add(jSeparator2);

        btnSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/views/rackview/res/select.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnSelect, org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnSelect.text")); // NOI18N
        btnSelect.setToolTipText(org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnSelect.toolTipText")); // NOI18N
        btnSelect.setFocusable(false);
        btnSelect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSelect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSelectMouseClicked(evt);
            }
        });
        toolBarMain.add(btnSelect);

        btnConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/views/rackview/res/connect.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnConnect, org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnConnect.text")); // NOI18N
        btnConnect.setToolTipText(org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnConnect.toolTipText")); // NOI18N
        btnConnect.setFocusable(false);
        btnConnect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnConnect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConnectMouseClicked(evt);
            }
        });
        toolBarMain.add(btnConnect);

        btnRackTableView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/views/rackview/res/show_table.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnRackTableView, org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnRackTableView.text")); // NOI18N
        btnRackTableView.setToolTipText(org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnRackTableView.toolTipText")); // NOI18N
        btnRackTableView.setFocusable(false);
        btnRackTableView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRackTableView.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRackTableView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRackTableViewMouseClicked(evt);
            }
        });
        toolBarMain.add(btnRackTableView);
        toolBarMain.add(jSeparator3);

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/views/rackview/res/refresh.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnRefresh, org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnRefresh.text")); // NOI18N
        btnRefresh.setToolTipText(org.openide.util.NbBundle.getMessage(RackViewTopComponent.class, "RackViewTopComponent.btnRefresh.toolTipText")); // NOI18N
        btnRefresh.setFocusable(false);
        btnRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRefreshMouseClicked(evt);
            }
        });
        toolBarMain.add(btnRefresh);

        add(toolBarMain, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseClicked
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        scene.clear();
        service.shownRack();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnRefreshMouseClicked

    private void btnExportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExportMouseClicked
        ExportScenePanel exportPanel = new ExportScenePanel(
            new SceneExportFilter[]{ImageFilter.getInstance()}, 
            scene, rack.toString());
                
        DialogDescriptor dd = new DialogDescriptor(exportPanel, "Export options",true, exportPanel);
        DialogDisplayer.getDefault().createDialog(dd).setVisible(true);
    }//GEN-LAST:event_btnExportMouseClicked

    private void btnRackTableViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRackTableViewMouseClicked
        if (!btnRackTableView.isEnabled())
            return;
        
        RackTableViewTopComponent rackTable = ((RackTableViewTopComponent) WindowManager.
            getDefault().findTopComponent("RackTableViewTopComponent_" + rack.getOid())); //NOI18N

        if (rackTable == null) {
            rackTable = new RackTableViewTopComponent(rack, service);
            rackTable.open();
        } else {
            if (rackTable.isOpened())
                rackTable.requestAttention(true);
            else { //Even after closed, the TCs (even the no-singletons) continue to exist in the NBP's PersistenceManager registry, 
                   //so we will reuse the instance, refreshing the vierw first
                rackTable.refresh();
                rackTable.open();
            }
        }
        rackTable.requestActive();
    }//GEN-LAST:event_btnRackTableViewMouseClicked

    private void btnShowConnectionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnShowConnectionsMouseClicked
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (satelliteView == null)
            satelliteView = scene.createSatelliteView();
        
        if (isAncestorOf(satelliteView)) {
            scene.setShowConnections(false);
            scene.clear();
            service.shownRack();
            remove(satelliteView);
            
            scene.setActiveTool(RackViewScene.ACTION_SELECT);
            btnSelect.setSelected(true);        
            btnConnect.setSelected(false);
            btnShowConnections.setToolTipText("Show Connections in Rack");
            btnSelect.setEnabled(false);
            btnConnect.setEnabled(false);
            btnRackTableView.setEnabled(false);
        } else {
            add(satelliteView, BorderLayout.EAST);
            scene.setShowConnections(true);            
            scene.clear();
            service.shownRack(); 
            
            btnShowConnections.setToolTipText("Hide Connections in Rack");
            btnSelect.setEnabled(true);
            btnConnect.setEnabled(true);
            btnRackTableView.setEnabled(true);
        }
        revalidate();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnShowConnectionsMouseClicked

    private void btnConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConnectMouseClicked
        if (!btnConnect.isEnabled())
            return;
        
        btnSelect.setSelected(false);
        btnConnect.setSelected(true);
        scene.setActiveTool(RackViewScene.ACTION_CONNECT);
    }//GEN-LAST:event_btnConnectMouseClicked

    private void btnSelectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectMouseClicked
        if (!btnSelect.isEnabled())
            return;
        btnSelect.setSelected(true);        
        btnConnect.setSelected(false);
        scene.setActiveTool(RackViewScene.ACTION_SELECT);
    }//GEN-LAST:event_btnSelectMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnConnect;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnRackTableView;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JToggleButton btnSelect;
    private javax.swing.JToggleButton btnShowConnections;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JScrollPane pnlMainScrollPanel;
    private javax.swing.JToolBar toolBarMain;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        service.shownRack();        
    }

    @Override
    public void componentClosed() {
        scene.clear();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getID() == RackViewScene.SCENE_CHANGE) {
            scene.clear();
            service.shownRack();
        }
    }

    @Override
    public void refresh() {
    }
}
