/*
 * Copyright (c) 2016 adrian.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    adrian - initial API and implementation and/or initial documentation
 */
package com.neotropic.inventory.modules.ipam;

import org.inventory.communications.core.LocalObjectLight;
import org.inventory.core.services.api.behaviors.Refreshable;
import org.inventory.core.services.api.notifications.NotificationUtil;
import com.neotropic.inventory.modules.ipam.nodes.IpamRootNode;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.neotropic.inventory.modules.ipam//IPAMModuleTopComponent//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "IPAMModuleTopComponentTopComponent",
        iconBase="com/neotropic/inventory/modules/res/icon.png", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "com.neotropic.inventory.modules.ipam.IPAMModuleTopComponentTopComponent")
@ActionReference(path = "Menu/Tools" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_IPAMModuleTopComponentAction",
        preferredID = "IPAMModuleTopComponentTopComponent"
)
@Messages({
    "CTL_IPAMModuleTopComponentAction=IP Address Manager",
    "CTL_IPAMModuleTopComponentTopComponent=IP Address Manager",
    "HINT_IPAMModuleTopComponentTopComponent=IP Address Manager"
})
public final class IPAMModuleTopComponentTopComponent extends TopComponent implements ExplorerManager.Provider, Refreshable {
    
    private static final ExplorerManager em = new ExplorerManager();
    private BeanTreeView treeView;
    private IPAMModuleService ipams;
    
    public IPAMModuleTopComponentTopComponent() {
        initComponents();
        setName(Bundle.CTL_IPAMModuleTopComponentTopComponent());
        setToolTipText(Bundle.HINT_IPAMModuleTopComponentTopComponent());
        initCustomComponents();
    }

    public void initCustomComponents(){
        ipams = new IPAMModuleService(this);
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        treeView = new BeanTreeView();
        treeView.setRootVisible(false);
        add(treeView);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        setRoot();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void setRoot(){
        LocalObjectLight[] rootChildren = ipams.getRootChildren();
        if (rootChildren != null)
            em.setRootContext(new IpamRootNode(rootChildren));
        else
            em.setRootContext(Node.EMPTY);
        
    }
    
    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void refresh() {
        
    }

    public NotificationUtil getNotifier(){
         return NotificationUtil.getInstance();
    }
   
}
