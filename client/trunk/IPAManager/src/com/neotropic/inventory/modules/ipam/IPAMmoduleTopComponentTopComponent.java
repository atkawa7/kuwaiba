/**
 *  Copyright 2010-2016 Neotropic SAS <contact@neotropic.co>.
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.neotropic.inventory.modules.ipam;

import java.util.ArrayList;
import java.util.List;
import javax.swing.ActionMap;
import javax.swing.text.DefaultEditorKit;
import org.inventory.communications.core.LocalObjectLight;
import org.inventory.core.services.api.behaviors.Refreshable;
import org.inventory.core.services.api.notifications.NotificationUtil;
import org.inventory.navigation.applicationnodes.objectnodes.ObjectChildren;
import org.inventory.navigation.applicationnodes.objectnodes.ObjectNode;
import org.inventory.navigation.applicationnodes.objectnodes.RootObjectNode;
import org.inventory.navigation.applicationnodes.pools.PoolRootNode;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;

/**
 * Main top component for the IP Administration Manager module
 * @author Adrian Martinez Molina <adrian.martinez@kuwaiba.org>
 */
@ConvertAsProperties(
        dtd = "-//com.neotropic.inventory.modules.ipam//IPAMmodulesTopComponent//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "IPAMmodulesTopComponentTopComponent",
        iconBase = "com/neotropic/inventory/modules/res/icon.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "com.neotropic.inventory.modules.ipam.IPAMmodulesTopComponentTopComponent")
@ActionReference(path = "Menu/Tools" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_IPAMmodulesTopComponentAction",
        preferredID = "IPAMmodulesTopComponentTopComponent"
)
@Messages({
    "CTL_IPAMmodulesTopComponentAction=IP Address Manager",
    "CTL_IPAMmodulesTopComponentTopComponent=IP Address Manager",
    "HINT_IPAMmodulesTopComponentTopComponent=IP Address Manager"
})
public final class IPAMmoduleTopComponentTopComponent extends TopComponent implements ExplorerManager.Provider, Refreshable{

    private IPAMMouduleService ipAMservice;
    private BeanTreeView treeView;
    private final ExplorerManager em = new ExplorerManager();
    
    public IPAMmoduleTopComponentTopComponent() {
        initComponents();
        initCustomComponents();
        setName(Bundle.CTL_IPAMmodulesTopComponentTopComponent());
        setToolTipText(Bundle.HINT_IPAMmodulesTopComponentTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void initCustomComponents(){
        ipAMservice = new IPAMMouduleService(this);
        ActionMap map = getActionMap();
        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(em));
        map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(em));
        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(em));
        associateLookup(ExplorerUtils.createLookup(em, map));
        treeView = new BeanTreeView();
        treeView.setWheelScrollingEnabled(true);
        add(treeView);
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        setRoot();
    }

    @Override
    public void componentClosed() {
        em.getRootContext().getChildren().remove(em.getRootContext().getChildren().getNodes());
        //Workaround, because when you close a TC whose mode is "explorer" and open it again,
        //it docks as "explorer". This forces the TC to be always docked "explorer"
        Mode myMode = WindowManager.getDefault().findMode("explorer"); //NOI18N
        myMode.dockInto(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    public void setRoot(){
        LocalObjectLight[] rootChildren = ipAMservice.getRootChildren();
        if (rootChildren != null)
            em.setRootContext(new PoolRootNode(rootChildren));
        else
            em.setRootContext(Node.EMPTY);
    }
    
    public NotificationUtil getNotifier() {
        return NotificationUtil.getInstance();
    }
    
    @Override
    public void refresh() {
        if (em.getRootContext() instanceof RootObjectNode){
            List<Node> toBeDeleted = new ArrayList<>();
            for (Node child : em.getRootContext().getChildren().getNodes()){
                if (!((ObjectNode)child).refresh())
                    toBeDeleted.add(child);
            }
            for (Node deadNode : toBeDeleted)
                ((ObjectChildren)em.getRootContext().getChildren()).remove(new Node[]{deadNode});
        }else{
            setRoot();
            revalidate();
        }
    }
    
    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
