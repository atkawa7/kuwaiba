/*
 *  Copyright 2010-2017 Neotropic SAS <contact@neotropic.co>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */
package com.neotropic.inventory.modules.projects;

import com.neotropic.inventory.modules.projects.nodes.ProjectRootNode;
import org.inventory.core.services.api.behaviors.Refreshable;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;

/**
 * Top component for the Projects Module
 * @author Johny Andres Ortega Ruiz <johny.ortega@kuwaiba.org>
 */
@TopComponent.Description(
        preferredID = "ProjectsModuleTopComponent", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@Messages({
    "CTL_ProjectsModuleTopComponent=Projects",
    "HINT_ProjectsModuleTopComponent=Projects"
})
public final class ProjectsModuleTopComponent extends TopComponent implements ExplorerManager.Provider, Refreshable {
    private static ProjectsModuleTopComponent instance;
    
    private final ExplorerManager em = new ExplorerManager();
    private BeanTreeView treeView;
    private ProjectsModuleService service;

    private ProjectsModuleTopComponent() {
        initComponents();
        setName(Bundle.CTL_ProjectsModuleTopComponent());
        setToolTipText(Bundle.HINT_ProjectsModuleTopComponent());
        initCustomComponents();
    }
    
    public static ProjectsModuleTopComponent getInstance() {
        if (instance == null) {
            instance = new ProjectsModuleTopComponent();
            Mode navigator = WindowManager.getDefault().findMode("explorer");
            navigator.dockInto(instance);
        }
        return instance;
    }
    
    public void initCustomComponents() {
        service = new ProjectsModuleService();
        treeView = new BeanTreeView();
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        add(treeView);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        em.setRootContext(new ProjectRootNode(service.getProjectRootPool()));
        ExplorerUtils.activateActions(em, true);
    }

    @Override
    public void componentClosed() {
        ExplorerUtils.activateActions(em, false);
        em.setRootContext(Node.EMPTY);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void refresh() {
        componentClosed();
        componentOpened();
    }
}
