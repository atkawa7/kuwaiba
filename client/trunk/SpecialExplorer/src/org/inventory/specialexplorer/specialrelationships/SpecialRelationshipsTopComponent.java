/*
 *  Copyright 2010-2017 Neotropic SAS <contact@neotropic.co>.
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.inventory.specialexplorer.specialrelationships;

import org.inventory.graphicalrepresentation.specialrelationships.GraphicalRepSpecialRelationshipsTopComponent;
import org.inventory.navigation.navigationtree.nodes.ObjectNode;
import org.inventory.specialexplorer.specialrelationships.nodes.SpecialRelatedObjectNode;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Shows a tree with the special relationships of an object
 * @author Charles Edward Bedon Cortazar <charles.bedon@kuwaiba.org>
 * @author Johny Andres Ortega Ruiz <johny.ortega@kuwaiba.org>
 */
@ConvertAsProperties(
        dtd = "-//org.inventory.specialexplorer.specialrelationships//SpecialRelationships//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SpecialRelationshipsTopComponent",
        iconBase="org/inventory/specialexplorer/res/special_relationships_explorer.png", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "navigator", openAtStartup = false)
@ActionID(category = "Tools", id = "org.inventory.specialexplorer.specialrelationships.SpecialRelationshipsTopComponent")
@ActionReference(path = "Menu/Tools/Navigation")
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SpecialRelationshipsAction",
        preferredID = "SpecialRelationshipsTopComponent"
)
@Messages({
    "CTL_SpecialRelationshipsAction=Show Special Relationships",
    "CTL_SpecialRelationshipsTopComponent=Relationships",
    "HINT_SpecialRelationshipsTopComponent=Relationships"
})
public final class SpecialRelationshipsTopComponent extends TopComponent implements 
    ExplorerManager.Provider, LookupListener {
    
    private BeanTreeView tree;
    private ExplorerManager em;
    
    private Lookup.Result<ObjectNode> lookupResult;

    public SpecialRelationshipsTopComponent() {
        initComponents();
        initComponentsCustom();
        setName(Bundle.CTL_SpecialRelationshipsTopComponent());
    }
    
    private void initComponentsCustom() {
        em = new ExplorerManager();
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        tree = new BeanTreeView();
        add(tree);
        em.setRootContext(Node.EMPTY);
        em.getRootContext().setDisplayName("Select a node from the Navigation Tree");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBarMain = new javax.swing.JToolBar();
        btnGraphicalRepresentation = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        toolBarMain.setRollover(true);
        toolBarMain.setAlignmentY(0.5F);
        toolBarMain.setMaximumSize(new java.awt.Dimension(392, 38));
        toolBarMain.setMinimumSize(new java.awt.Dimension(392, 38));
        toolBarMain.setPreferredSize(new java.awt.Dimension(392, 38));

        btnGraphicalRepresentation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/specialexplorer/res/graphical_representation.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnGraphicalRepresentation, org.openide.util.NbBundle.getMessage(SpecialRelationshipsTopComponent.class, "SpecialRelationshipsTopComponent.btnGraphicalRepresentation.text")); // NOI18N
        btnGraphicalRepresentation.setToolTipText(org.openide.util.NbBundle.getMessage(SpecialRelationshipsTopComponent.class, "SpecialRelationshipsTopComponent.btnGraphicalRepresentation.toolTipText")); // NOI18N
        btnGraphicalRepresentation.setEnabled(false);
        btnGraphicalRepresentation.setFocusable(false);
        btnGraphicalRepresentation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGraphicalRepresentation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGraphicalRepresentation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGraphicalRepresentationMouseClicked(evt);
            }
        });
        btnGraphicalRepresentation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraphicalRepresentationActionPerformed(evt);
            }
        });
        toolBarMain.add(btnGraphicalRepresentation);

        add(toolBarMain, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGraphicalRepresentationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGraphicalRepresentationMouseClicked
        if (em.getRootContext() instanceof SpecialRelatedObjectNode) {
            
            TopComponent tc = new GraphicalRepSpecialRelationshipsTopComponent(
                ((SpecialRelatedObjectNode) em.getRootContext()).getObject());
            
            tc.open();
            tc.requestActive();
            tc.requestAttention(true);
        }
    }//GEN-LAST:event_btnGraphicalRepresentationMouseClicked

    private void btnGraphicalRepresentationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraphicalRepresentationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnGraphicalRepresentationActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGraphicalRepresentation;
    private javax.swing.JToolBar toolBarMain;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        ExplorerUtils.activateActions(em, true);
        lookupResult = Utilities.actionsGlobalContext().lookupResult(ObjectNode.class);
        lookupResult.addLookupListener(this);
        resultChanged(null);
    }

    @Override
    public void componentClosed() {
        ExplorerUtils.activateActions(em, false);
        em.setRootContext(Node.EMPTY);
        lookupResult.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        
        if(lookupResult.allInstances().size() == 1){
            ObjectNode node = (ObjectNode)lookupResult.allInstances().iterator().next();
            
            if (node instanceof SpecialRelatedObjectNode) //Ignore its own nodes
                return;
            
            if (!btnGraphicalRepresentation.isEnabled())
                btnGraphicalRepresentation.setEnabled(true);
            
            SpecialRelatedObjectNode rootNode = new SpecialRelatedObjectNode(node.getObject());
            em.setRootContext(rootNode);
        }
    }
}
