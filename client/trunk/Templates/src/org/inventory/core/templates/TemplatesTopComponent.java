/**
 * Copyright 2010-2017 Neotropic SAS <contact@neotropic.co>.
 * 
* Licensed under the EPL License, Version 1.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 * 
* http://www.eclipse.org/legal/epl-v10.html
 * 
* Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.inventory.core.templates;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.ButtonGroup;
import javax.swing.InputMap;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultEditorKit;
import org.inventory.communications.CommunicationsStub;
import org.inventory.communications.core.LocalClassMetadata;
import org.inventory.communications.core.LocalClassMetadataLight;
import org.inventory.communications.core.LocalObjectLight;
import org.inventory.core.services.api.behaviors.Refreshable;
import org.inventory.core.services.i18n.I18N;
import org.inventory.core.templates.nodes.TemplateElementNode;
import org.inventory.core.templates.nodes.TemplatesModuleClassNode;
import org.inventory.core.templates.nodes.actions.TemplateActionsFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;

/**
 * Template Manager Top component.
 * @author Charles Edward Bedon Cortazar <charles.bedon@kuwaiba.org>
 */
@ConvertAsProperties(
        dtd = "-//org.inventory.core.templates//Templates//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TemplatesTopComponent",
        iconBase="org/inventory/core/templates/res/icon.png", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.inventory.core.templates.TemplatesTopComponent")
@ActionReferences(value = {@ActionReference(path = "Menu/Tools"),
    @ActionReference(path = "Toolbars/04_Customization", position = 4)})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TemplatesAction",
        preferredID = "TemplatesTopComponent"
)
@Messages({
    "CTL_TemplatesAction=Template Manager"
})
public final class TemplatesTopComponent extends TopComponent implements ExplorerManager.Provider, Refreshable {

    private ExplorerManager em;
    private BeanTreeView treeMain;
    private TemplatesService service;
    
    private ButtonGroup buttonGroupTools;
    
    public TemplatesTopComponent() {
        initComponents();
        initCustomComponents();
        setName(I18N.gm("top_component_name_template"));
        setToolTipText(I18N.gm("top_component_tool_tip_text_template"));
    }

    private void initCustomComponents() {
        service = new TemplatesService(this);
        em = new ExplorerManager();
        
        //Global actions
        ActionMap map = getActionMap();
        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(em));
        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(em));
        
        //Now the keystrokes
        InputMap keys = getInputMap(WHEN_IN_FOCUSED_WINDOW);
        keys.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_DOWN_MASK), DefaultEditorKit.copyAction);
        keys.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_DOWN_MASK), DefaultEditorKit.pasteAction);
        
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        
        treeMain = new BeanTreeView();
        treeMain.setRootVisible(false);
        add(treeMain);
        
        buttonGroupTools = new ButtonGroup();
        buttonGroupTools.add(btnDefault);
        buttonGroupTools.add(btnModel);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolMain = new javax.swing.JToolBar();
        btnDefault = new javax.swing.JToggleButton();
        btnModel = new javax.swing.JToggleButton();
        pnlMain = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        toolMain.setRollover(true);

        btnDefault.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/templates/res/templateManager.png"))); // NOI18N
        btnDefault.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(btnDefault, org.openide.util.NbBundle.getMessage(TemplatesTopComponent.class, "TemplatesTopComponent.btnDefault.text")); // NOI18N
        btnDefault.setToolTipText(org.openide.util.NbBundle.getMessage(TemplatesTopComponent.class, "TemplatesTopComponent.btnDefault.toolTipText")); // NOI18N
        btnDefault.setFocusable(false);
        btnDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDefault.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefaultActionPerformed(evt);
            }
        });
        toolMain.add(btnDefault);

        btnModel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/templates/res/modelLayout.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnModel, org.openide.util.NbBundle.getMessage(TemplatesTopComponent.class, "TemplatesTopComponent.btnModel.text")); // NOI18N
        btnModel.setToolTipText(org.openide.util.NbBundle.getMessage(TemplatesTopComponent.class, "TemplatesTopComponent.btnModel.toolTipText")); // NOI18N
        btnModel.setFocusable(false);
        btnModel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnModel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnModel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnModelMouseClicked(evt);
            }
        });
        toolMain.add(btnModel);

        add(toolMain, java.awt.BorderLayout.PAGE_START);
        add(pnlMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnModelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModelMouseClicked
        LocalClassMetadata equipmentModelClass = CommunicationsStub.getInstance().getMetaForClass("EquipmentModel", true); //NOI18N
        if (equipmentModelClass == null) {
            JOptionPane.showMessageDialog(null, String.format(I18N.gm("database_seems_outdated"), I18N.gm("patch_equipment_model_layout")), I18N.gm("error"), JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        em.setRootContext(new AbstractNode(new Children.Keys<LocalClassMetadataLight>() {
            
            {
                setKeys(service.getClassesWithModelTypeAttribute());
            }
            
            @Override
            protected Node[] createNodes(LocalClassMetadataLight key) {
                return new Node[] {new TemplatesModuleClassNode(key) {
                    
                    {
                        setChildren(new TemplatesModuleClassNode.ClassChildren() {

                            @Override
                            protected Node[] createNodes(LocalObjectLight t) {
                                return new Node[] { new TemplateElementNode(t) {
                                    @Override
                                    public Action[] getActions(boolean context) {
                                        List<Action> lstActions = new ArrayList(Arrays.asList(super.getActions(context)));
                                        lstActions.add(0, TemplateActionsFactory.getAssociateLayoutAction());
                                        lstActions.add(1, null);
                                        
                                        return lstActions.toArray(new Action[0]);
                                    }
                                }};
                            }
                        });
                    }
                }};
            }
        }));
    }//GEN-LAST:event_btnModelMouseClicked

    private void btnDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefaultActionPerformed
        service.setRoot();
    }//GEN-LAST:event_btnDefaultActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnDefault;
    private javax.swing.JToggleButton btnModel;
    private javax.swing.JScrollPane pnlMain;
    private javax.swing.JToolBar toolMain;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        service.setRoot();
    }

    @Override
    public void componentClosed() {
        em.setRootContext(Node.EMPTY);
        
        Mode myMode = WindowManager.getDefault().findMode("explorer"); //NOI18N
        myMode.dockInto(this);
    }
    
    void writeProperties(java.util.Properties p) {}

    void readProperties(java.util.Properties p) {}

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void refresh() {
        componentClosed();
        componentOpened();
    }
}
