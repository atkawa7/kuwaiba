package org.inventory.edition.objectdetail;

import java.awt.BorderLayout;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import org.openide.explorer.ExplorerManager;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager.Provider;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.propertysheet.PropertySheetView;


@ConvertAsProperties(dtd = "-//org.inventory.edition.objectdetail//ObjectDetail//EN",
autostore = false)
public final class ObjectDetailTopComponent extends TopComponent
        implements Provider{

    private static ObjectDetailTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/inventory/edition/objectdetail/res/icon.png";
    private static final String PREFERRED_ID = "ObjectDetailTopComponent";

    private PropertySheetView pSheetView;

    private final ExplorerManager em = new ExplorerManager();
    private ObjectDetailService ods;

    public ObjectDetailTopComponent() {
        initComponents();
        initComponentsCustom();
        setName(NbBundle.getMessage(ObjectDetailTopComponent.class, "CTL_ObjectDetailTopComponent"));
        setToolTipText(NbBundle.getMessage(ObjectDetailTopComponent.class, "HINT_ObjectDetailTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    public void initComponentsCustom(){
        associateLookup(ExplorerUtils.createLookup(em, new ActionMap()));
        pSheetView = new PropertySheetView();
        //Lookup.getDefault().
        add(pSheetView,BorderLayout.CENTER);

    }

    public PropertySheetView getpSheetView() {
        return pSheetView;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ObjectDetailTopComponent getDefault() {
        if (instance == null) {
            instance = new ObjectDetailTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ObjectDetailTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ObjectDetailTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ObjectDetailTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ObjectDetailTopComponent) {
            return (ObjectDetailTopComponent) win;
        }
        Logger.getLogger(ObjectDetailTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    @Override
    public void addNotify(){
        ods = new ObjectDetailService(findInstance());
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    //MÃ©todos de la interfaz Provider
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
