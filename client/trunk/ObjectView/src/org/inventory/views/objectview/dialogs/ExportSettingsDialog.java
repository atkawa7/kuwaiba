/*
 *  Copyright 2010 Charles Edward Bedon Cortazar <charles.bedon@zoho.com>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */

package org.inventory.views.objectview.dialogs;

import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.inventory.views.objectview.scene.ViewScene;
import org.netbeans.api.visual.export.SceneExporter;

/**
 * This frame let the user to choose the export settings
 * @author Charles Edward Bedon Cortazar <charles.bedon@zoho.com>
 */
public class ExportSettingsDialog extends JDialog {

    private ViewScene myScene;
    /** Creates new form ExportSettingsDialog */
    public ExportSettingsDialog(ViewScene scene) {
        this.myScene = scene;
        initComponents();
        initCustomComponents();
    }

    private void initCustomComponents(){
        this.setTitle("Export Settings");
        this.setLocationRelativeTo(getRootPane());
        this.setModal(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLocaltion = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        btnAccept = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnLocation = new javax.swing.JButton();
        lblFormat = new javax.swing.JLabel();
        cmbFormat = new javax.swing.JComboBox();
        lblZoomType = new javax.swing.JLabel();
        cmbZoomType = new javax.swing.JComboBox();
        lblError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblLocaltion.setText(org.openide.util.NbBundle.getMessage(ExportSettingsDialog.class, "ExportSettingsDialog.lblLocaltion.text")); // NOI18N

        txtLocation.setText(org.openide.util.NbBundle.getMessage(ExportSettingsDialog.class, "ExportSettingsDialog.txtLocation.text")); // NOI18N

        btnAccept.setText(org.openide.util.NbBundle.getMessage(ExportSettingsDialog.class, "ExportSettingsDialog.btnAccept.text")); // NOI18N
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnCancel.setText(org.openide.util.NbBundle.getMessage(ExportSettingsDialog.class, "ExportSettingsDialog.btnCancel.text")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnLocation.setText(org.openide.util.NbBundle.getMessage(ExportSettingsDialog.class, "ExportSettingsDialog.btnLocation.text")); // NOI18N
        btnLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocationActionPerformed(evt);
            }
        });

        lblFormat.setText(org.openide.util.NbBundle.getMessage(ExportSettingsDialog.class, "ExportSettingsDialog.lblFormat.text")); // NOI18N

        cmbFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JPG", "PNG" }));

        lblZoomType.setText(org.openide.util.NbBundle.getMessage(ExportSettingsDialog.class, "ExportSettingsDialog.lblZoomType.text")); // NOI18N

        cmbZoomType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "Current zoom level" }));

        lblError.setFont(new java.awt.Font("Bitstream Vera Sans", 0, 10));
        lblError.setForeground(new java.awt.Color(255, 0, 0));
        lblError.setText(org.openide.util.NbBundle.getMessage(ExportSettingsDialog.class, "ExportSettingsDialog.lblError.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblLocaltion)
                            .addGap(18, 18, 18)
                            .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnLocation)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFormat)
                            .addComponent(lblZoomType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbZoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLocaltion)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFormat))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblZoomType)
                            .addComponent(cmbZoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnLocation)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAccept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        try {
            SceneExporter.createImage(myScene,
                                      new File(txtLocation.getText()),
                                      cmbFormat.getSelectedIndex() == 0 ? SceneExporter.ImageType.JPG:SceneExporter.ImageType.PNG,
                                      cmbZoomType.getSelectedIndex() == 0 ? SceneExporter.ZoomType.ACTUAL_SIZE : SceneExporter.ZoomType.CURRENT_ZOOM_LEVEL,
                                      false,
                                      false,
                                      100,
                                      0,  //Not used
                                      0); //Not used
            JOptionPane.showMessageDialog(this, "The image was exported successfully", "Success!", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (IOException ex) {
            lblError.setText("The file name is not valid or you don't have enough permissions");
        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocationActionPerformed
        JFileChooser fChooser = new JFileChooser();
        fChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fChooser.setDialogTitle("Select a directory");
        if (fChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
            txtLocation.setText(fChooser.getSelectedFile().getAbsolutePath()+
                    +File.pathSeparatorChar+"view"+Calendar.getInstance().get(Calendar.DAY_OF_YEAR)+ //NOI18N
                    "-"+Calendar.getInstance().get(Calendar.MINUTE)+ //NOI18N
                    (cmbFormat.getSelectedIndex() == 0?".jpg":".png")); //NOI18N
    }//GEN-LAST:event_btnLocationActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnLocation;
    private javax.swing.JComboBox cmbFormat;
    private javax.swing.JComboBox cmbZoomType;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblFormat;
    private javax.swing.JLabel lblLocaltion;
    private javax.swing.JLabel lblZoomType;
    private javax.swing.JTextField txtLocation;
    // End of variables declaration//GEN-END:variables

}
