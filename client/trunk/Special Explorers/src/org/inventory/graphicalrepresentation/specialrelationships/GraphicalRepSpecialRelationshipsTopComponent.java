/*
 *  Copyright 2010-2017 Neotropic SAS <contact@neotropic.co>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */
package org.inventory.graphicalrepresentation.specialrelationships;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import org.inventory.communications.core.LocalObjectLight;
import org.inventory.core.services.api.behaviors.Refreshable;
import org.inventory.core.visual.export.ExportScenePanel;
import org.inventory.core.visual.export.filters.ImageFilter;
import org.inventory.core.visual.export.filters.SceneExportFilter;
import org.inventory.graphicalrepresentation.specialrelationships.actions.HideSpecialRelationshipChildrenAction;
import org.inventory.graphicalrepresentation.specialrelationships.actions.ShowSpecialRelationshipChildrenAction;
import org.inventory.graphicalrepresentation.specialrelationships.scene.GraphicalRepSpecialRelationshipsScene;
import org.inventory.specialexplorer.specialrelationships.nodes.LocalObjectLightWrapper;
import org.openide.*;
import org.openide.explorer.ExplorerManager;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays a graphical representation of special relationships.
 * @author Johny Andres Ortega Ruiz <johny.ortega@kuwaiba.org>
 */
@TopComponent.Description(
        preferredID = "GraphicalRepSpecialRelationshipsTopComponent",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_GraphicalRepSpecialRelationshipsTopComponent=Graphical Representation",
    "HINT_GraphicalRepSpecialRelationshipsTopComponent=Show a Graphical Representation of Special Relationships"
})
public final class GraphicalRepSpecialRelationshipsTopComponent extends TopComponent implements 
    ExplorerManager.Provider, Refreshable, ActionListener {
    
    private ExplorerManager em;
    private GraphicalRepSpecialRelationshipService service;
    private GraphicalRepSpecialRelationshipsScene scene;

    public GraphicalRepSpecialRelationshipsTopComponent(LocalObjectLight rootObject) {
        initComponents();
        initComponentsCustom(rootObject);
        setName(Bundle.CTL_GraphicalRepSpecialRelationshipsTopComponent());
        setToolTipText(Bundle.HINT_GraphicalRepSpecialRelationshipsTopComponent());
    }
    
    private void initComponentsCustom(LocalObjectLight rootObject) {
        em = new ExplorerManager();
        
        scene = new GraphicalRepSpecialRelationshipsScene();
        scene.addChangeListener(this);
        service = new GraphicalRepSpecialRelationshipService(scene, new LocalObjectLightWrapper(rootObject));
        
        associateLookup(scene.getLookup());
        pnlMainScrollPanel.setViewportView(scene.createView());
        add(scene.createSatelliteView(), BorderLayout.SOUTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBarMain = new javax.swing.JToolBar();
        btnCollapse = new javax.swing.JButton();
        btnExportAsImg = new javax.swing.JButton();
        btnOrganize = new javax.swing.JButton();
        pnlMainScrollPanel = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        toolBarMain.setRollover(true);
        toolBarMain.setAlignmentY(0.5F);
        toolBarMain.setMaximumSize(new java.awt.Dimension(392, 38));
        toolBarMain.setMinimumSize(new java.awt.Dimension(392, 38));
        toolBarMain.setPreferredSize(new java.awt.Dimension(326, 33));

        btnCollapse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/graphicalrepresentation/specialrelationships/res/collase.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnCollapse, org.openide.util.NbBundle.getMessage(GraphicalRepSpecialRelationshipsTopComponent.class, "GraphicalRepSpecialRelationshipsTopComponent.btnCollapse.text")); // NOI18N
        btnCollapse.setToolTipText(org.openide.util.NbBundle.getMessage(GraphicalRepSpecialRelationshipsTopComponent.class, "GraphicalRepSpecialRelationshipsTopComponent.btnCollapse.toolTipText")); // NOI18N
        btnCollapse.setFocusable(false);
        btnCollapse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCollapse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCollapse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCollapseMouseClicked(evt);
            }
        });
        toolBarMain.add(btnCollapse);

        btnExportAsImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/graphicalrepresentation/specialrelationships/res/exportAsImg.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnExportAsImg, org.openide.util.NbBundle.getMessage(GraphicalRepSpecialRelationshipsTopComponent.class, "GraphicalRepSpecialRelationshipsTopComponent.btnExportAsImg.text")); // NOI18N
        btnExportAsImg.setToolTipText(org.openide.util.NbBundle.getMessage(GraphicalRepSpecialRelationshipsTopComponent.class, "GraphicalRepSpecialRelationshipsTopComponent.btnExportAsImg.toolTipText")); // NOI18N
        btnExportAsImg.setFocusable(false);
        btnExportAsImg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExportAsImg.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExportAsImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportAsImgActionPerformed(evt);
            }
        });
        toolBarMain.add(btnExportAsImg);

        btnOrganize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/graphicalrepresentation/specialrelationships/res/organize.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnOrganize, org.openide.util.NbBundle.getMessage(GraphicalRepSpecialRelationshipsTopComponent.class, "GraphicalRepSpecialRelationshipsTopComponent.btnOrganize.text")); // NOI18N
        btnOrganize.setToolTipText(org.openide.util.NbBundle.getMessage(GraphicalRepSpecialRelationshipsTopComponent.class, "GraphicalRepSpecialRelationshipsTopComponent.btnOrganize.toolTipText")); // NOI18N
        btnOrganize.setFocusable(false);
        btnOrganize.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOrganize.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOrganize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOrganizeMouseClicked(evt);
            }
        });
        toolBarMain.add(btnOrganize);

        add(toolBarMain, java.awt.BorderLayout.PAGE_START);
        add(pnlMainScrollPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOrganizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOrganizeMouseClicked
        scene.reorganizeNodes();
    }//GEN-LAST:event_btnOrganizeMouseClicked

    private void btnExportAsImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportAsImgActionPerformed
        ExportScenePanel exportPanel = new ExportScenePanel(new SceneExportFilter[]{ImageFilter.getInstance()}, scene);
        DialogDescriptor dd = new DialogDescriptor(exportPanel, "Export options", true, exportPanel);
        DialogDisplayer.getDefault().createDialog(dd).setVisible(true);
    }//GEN-LAST:event_btnExportAsImgActionPerformed

    private void btnCollapseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCollapseMouseClicked
        // TODO add your handling code here:
        service.hideSpecialRelationshipChildren(service.getRoot());
    }//GEN-LAST:event_btnCollapseMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCollapse;
    private javax.swing.JButton btnExportAsImg;
    private javax.swing.JButton btnOrganize;
    private javax.swing.JScrollPane pnlMainScrollPanel;
    private javax.swing.JToolBar toolBarMain;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        scene.render(service.getRoot());
        service.showSpecialRelationshipChildren(service.getRoot());
    }

    @Override
    public void componentClosed() {
        scene.removeAllListeners();
        scene.clear();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void refresh() {
    }
    
    @Override
    public String getDisplayName() {
        
        return String.format("Relationships for %s", service.getRoot().toString());
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        
        if (e.getActionCommand().equals(
            HideSpecialRelationshipChildrenAction.COMMAND)) {
            
            service.hideSpecialRelationshipChildren(
                (LocalObjectLightWrapper) e.getSource());
            return;
        }
        
        if (e.getActionCommand().equals(
            ShowSpecialRelationshipChildrenAction.COMMAND)) {
            
            service.showSpecialRelationshipChildren(
                (LocalObjectLightWrapper) e.getSource());
        }
    }
}
