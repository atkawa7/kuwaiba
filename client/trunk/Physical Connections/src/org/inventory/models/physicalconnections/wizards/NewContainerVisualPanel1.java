/**
 *  Copyright 2010-2017 Neotropic SAS <contact@neotropic.co>.
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.inventory.models.physicalconnections.wizards;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ListDataListener;
import org.inventory.communications.CommunicationsStub;
import org.inventory.communications.core.LocalClassMetadataLight;
import org.inventory.communications.core.LocalObjectLight;
import org.inventory.communications.util.Constants;

/**
 * The panel of the first step of the New Container wizard
 * @author Charles Edward Bedon Cortazar <charles.bedon@kuwaiba.org>
 */
public class NewContainerVisualPanel1 extends javax.swing.JPanel {

    /**
     * Creates new form NewContainerVisualPanel1
     */
    public NewContainerVisualPanel1() {
        initComponents();
        List<LocalClassMetadataLight> containerClasses = CommunicationsStub.getInstance().
                getLightSubclasses(Constants.CLASS_GENERICPHYSICALCONTAINER, false, false);
        
        cmbContainerClass.setModel(containerClasses == null ? new DefaultComboBoxModel() : new DefaultComboBoxModel(containerClasses.toArray()));
        
        if (cmbContainerClass.getItemCount() == 0)
            cmbContainerTemplate.setModel(new ContainerTemplateComboBoxModel());
        else
            cmbContainerTemplate.setModel(new ContainerTemplateComboBoxModel((LocalClassMetadataLight)cmbContainerClass.getItemAt(0)));
        
        
        cmbContainerClass.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    LocalClassMetadataLight selectedClass = (LocalClassMetadataLight)cmbContainerClass.getSelectedItem();
                    List<LocalObjectLight> containerTemplates = CommunicationsStub.getInstance().getTemplatesForClass(selectedClass.getClassName(), false);
                    if (containerTemplates != null)
                        ((ContainerTemplateComboBoxModel)cmbContainerTemplate.getModel()).setTemplates(containerTemplates);
                    else
                        ((ContainerTemplateComboBoxModel)cmbContainerTemplate.getModel()).resetTemplates();
                }
            }
        });    
    }
    
    public String getContainerName() {
        return txtContainerName.getText();
    }
    
    public LocalClassMetadataLight getContainerClass() {
        return (LocalClassMetadataLight)cmbContainerClass.getSelectedItem();
    }
    
    public LocalObjectLight getContainerTemplate() {
        return (LocalObjectLight)cmbContainerTemplate.getSelectedItem();
    }
    
    @Override
    public String getName() {
        return "Container information";
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblContainerClass = new javax.swing.JLabel();
        cmbContainerClass = new javax.swing.JComboBox();
        lblCOntainerTemplate = new javax.swing.JLabel();
        cmbContainerTemplate = new javax.swing.JComboBox();
        lblContainerName = new javax.swing.JLabel();
        txtContainerName = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(lblContainerClass, org.openide.util.NbBundle.getMessage(NewContainerVisualPanel1.class, "NewContainerVisualPanel1.lblContainerClass.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblCOntainerTemplate, org.openide.util.NbBundle.getMessage(NewContainerVisualPanel1.class, "NewContainerVisualPanel1.lblCOntainerTemplate.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblContainerName, org.openide.util.NbBundle.getMessage(NewContainerVisualPanel1.class, "NewContainerVisualPanel1.lblContainerName.text")); // NOI18N

        txtContainerName.setText(org.openide.util.NbBundle.getMessage(NewContainerVisualPanel1.class, "NewContainerVisualPanel1.txtContainerName.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblContainerClass)
                            .addComponent(lblCOntainerTemplate))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbContainerClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbContainerTemplate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblContainerName)
                        .addGap(44, 44, 44)
                        .addComponent(txtContainerName, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContainerName)
                    .addComponent(txtContainerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContainerClass)
                    .addComponent(cmbContainerClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCOntainerTemplate)
                    .addComponent(cmbContainerTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(115, 115, 115))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbContainerClass;
    private javax.swing.JComboBox cmbContainerTemplate;
    private javax.swing.JLabel lblCOntainerTemplate;
    private javax.swing.JLabel lblContainerClass;
    private javax.swing.JLabel lblContainerName;
    private javax.swing.JTextField txtContainerName;
    // End of variables declaration//GEN-END:variables

    private class ContainerTemplateComboBoxModel implements ComboBoxModel<LocalObjectLight> {
        private List<LocalObjectLight> containerTemplates;
        private int selectedTemplateIndex;

        public ContainerTemplateComboBoxModel() {
            containerTemplates = new ArrayList<>();
            containerTemplates.add(new LocalObjectLight(-1, "<No Template>", cmbContainerClass.getSelectedItem().toString()));
        }
        
        public ContainerTemplateComboBoxModel(LocalClassMetadataLight containerClass) {
            this();
            containerTemplates.addAll(CommunicationsStub.getInstance().getTemplatesForClass(containerClass.getClassName(), false));
        }

        @Override
        public void setSelectedItem(Object anItem) {
            selectedTemplateIndex = containerTemplates.indexOf(anItem);
        }

        @Override
        public Object getSelectedItem() {
            return containerTemplates.get(selectedTemplateIndex);
        }

        @Override
        public int getSize() {
            return containerTemplates.size();
        }

        @Override
        public LocalObjectLight getElementAt(int index) {
            return containerTemplates.get(index);
        }

        @Override
        public void addListDataListener(ListDataListener l) {}

        @Override
        public void removeListDataListener(ListDataListener l) {}
        
        public void setTemplates(List<LocalObjectLight> newTemplates) {
            newTemplates.add(0, new LocalObjectLight(-1, "<No Template>", cmbContainerClass.getSelectedItem().toString()));
            containerTemplates = newTemplates;
        }
        
        public void resetTemplates() {
            containerTemplates.clear();
            containerTemplates.add(new LocalObjectLight(-1, "<No Template>", cmbContainerClass.getSelectedItem().toString()));
        }
    }
}
