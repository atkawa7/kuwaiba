/*
 *  Copyright 2010 - 2014 Neotropic SAS <contact@neotropic.co>.
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.inventory.view.rackview;

import org.inventory.core.services.api.notifications.NotificationUtil;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Rack view module main TopComponent
 * @author Charles Edward Bedon Cortazar <charles.bedon@kuwaiba.org>
 */
@ConvertAsProperties(
    dtd = "-//org.inventory.view.rackview//RackView//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "RackViewTopComponent",
iconBase = "org/inventory/view/rackview/res/icon.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.inventory.view.rackview.RackViewTopComponent")
@ActionReferences(value = {@ActionReference(path = "Menu/Tools/Administrative"),
    @ActionReference(path = "Toolbars/Tools")})
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_RackViewAction",
preferredID = "RackViewTopComponent")
@Messages({
    "CTL_RackViewAction=RackView",
    "CTL_RackViewTopComponent=Rack View",
    "HINT_RackViewTopComponent=Shows the elements inside a rack"
})
public final class RackViewTopComponent extends TopComponent implements ExplorerManager.Provider {
    private ExplorerManager em = new ExplorerManager();
    private RackViewService rvs;
    private NotificationUtil nu;

    public RackViewTopComponent() {
        initComponents();
        setName(Bundle.CTL_RackViewTopComponent());
        setToolTipText(Bundle.HINT_RackViewTopComponent());
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        this.nu = Lookup.getDefault().lookup(NotificationUtil.class);
        this.rvs = new RackViewService(this);
        pnlScrollMain.setViewportView(rvs.getScene().createView());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlScrollMain = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(pnlScrollMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane pnlScrollMain;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        rvs.initializeLookupListener();
    }

    @Override
    public void componentClosed() {
        rvs.terminateLookListener();
        rvs.getScene().clear();
    }

    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
    
    public NotificationUtil getNotifier(){
        return nu;
    }
}