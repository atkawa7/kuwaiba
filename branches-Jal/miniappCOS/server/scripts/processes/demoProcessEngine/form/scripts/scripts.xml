<!--
 The scripts file contains a set of common functions to be used in forms
-->
<script>
  <!-- Queries Section -->
  <function type="query" name="getSubClassesLight" parameternames="className includeAbstractClasses includeSelf" queryname="getSubClassesLight" return="ClassMetadataLightList"/>
  <function type="query" name="getProviders" queryname="getProviders"/>
  <function type="query" name="getListTypeItems" parameternames="className" queryname="getListTypeItems" return="RemoteObjectLight"/>
  <function type="query" name="getInstancesOfClass" parameternames="className" queryname="getInstancesOfClass" return="RemoteObjectLight"/>
  <function type="query" name="getInstancesOfFinalClass" parameternames="className" queryname="getInstancesOfFinalClass" return="RemoteObjectLight"/>
  <function type="query" name="shared" parameternames="activityId sharedId" queryname="shared"/>
  <!-- Validator Section -->
  <function type="validator" name="emailValidator" parameternames="aField" message="The value must be a email">
    <![CDATA[
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;

      Pattern pat = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}\$", Pattern.CASE_INSENSITIVE);
      if (aField.getValue() == null)
          return false;
      return pat.matcher(aField.getValue()).matches();
    ]]>
  </function>
  <!-- Functions Section -->
  <function type="function" name="getAttributeFromField" parameternames="field attrName" return="Object">
    <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;

      def bem = PersistenceService.getInstance().getBusinessEntityManager();

      if (field.getValue() != null) {
        def fieldObject = bem.getObject(field.getValue().getClassName(), field.getValue().getId());
        return fieldObject.getAttributes().get(attrName);
      };
      null;
    ]]>
  </function>

  <function type="function" name="getGridDataParentName" parameternames="grid rowId colId className" return="RemoteObjectLight">
    <![CDATA[
      def row = Integer.valueOf(rowId);
      def col = Integer.valueOf(colId);
      def data = grid.getData(row, col);

      if (data != null) {
            def paramNames = new ArrayList();
            def paramValues = new ArrayList();

            paramNames.add("objClass");
            paramNames.add("objId");
            paramNames.add("objParentClass");

            paramValues.add(data.getClassName());
            paramValues.add(String.valueOf(data.getId()));
            paramValues.add(className);

            return scriptQueryExecutor.execute("getParentName", paramNames, paramValues);
      };
      null;
    ]]>
  </function>

  <function type="function" name="getParentName" parameternames="node className" return="RemoteObjectLight">
    <![CDATA[
      if (node.getValue() != null) {
            def paramNames = new ArrayList();
            def paramValues = new ArrayList();

            paramNames.add("objClass");
            paramNames.add("objId");
            paramNames.add("objParentClass");

            paramValues.add(node.getValue().getClassName());
            paramValues.add(String.valueOf(node.getValue().getId()));
            paramValues.add(className);

            return scriptQueryExecutor.execute("getParentName", paramNames, paramValues);
      };
      null;
    ]]>
  </function>

  <function type="function" name="getSelectedRowGridDataValue" parameternames="grid colId">
    <![CDATA[
      if (grid != null && colId != null && grid.getSelectedRow() != -1L) {

        def row = Integer.valueOf(String.valueOf(grid.getSelectedRow()));
        def col = Integer.valueOf(colId);
        def data = grid.getData(row, col);

        return data;
      };
      null;
    ]]>
  </function>

  <function type="function" name="getSelecteRowGridDataCaptionValue" parameternames="grid colId">
    <![CDATA[
      if (grid != null && colId != null && grid.getSelectedRow() != -1L) {

        def row = Integer.valueOf(String.valueOf(grid.getSelectedRow()));
        def col = Integer.valueOf(colId);
        def data = grid.getData(row, col);

        if (data != null) {
          return data.getName();
        };
      };
      null;
    ]]>
  </function>

  <function type="function" name="getSelecteRowGridDataPathValue" parameternames="grid colId">
    <![CDATA[
      if (grid != null && colId != null && grid.getSelectedRow() != -1L) {

        def row = Integer.valueOf(String.valueOf(grid.getSelectedRow()));
        def col = Integer.valueOf(colId);
        def data = grid.getData(row, col);

        if (data != null) {
          return data.getPath();
        };
      };
      null;
    ]]>
  </function>

  <function type="function" name="getGridDataValue" parameternames="grid rowId colId" return="String">
    <![CDATA[
      def row = Integer.valueOf(rowId);
      def col = Integer.valueOf(colId);
      def data = grid.getData(row, col);

      def result = "";

      if (data != null)
        result = data.toString();

      result;
    ]]>
  </function>

  <function type="function" name="getGridDataAttributeValue" parameternames="grid rowId colId attrName" return="RemoteObjectLight">
    <![CDATA[
      def row = Integer.valueOf(rowId);
      def col = Integer.valueOf(colId);
      def data = grid.getData(row, col);

      if (data != null) {
            def paramNames = new ArrayList();
            def paramValues = new ArrayList();

            paramNames.add("objectClassName");
            paramNames.add("objectId");
            paramNames.add("attributeName");

            paramValues.add(data.getClassName());
            paramValues.add(String.valueOf(data.getId()));
            paramValues.add(attrName);

            return scriptQueryExecutor.execute("getAttributeValue", paramNames, paramValues);
      };
      null;
    ]]>
  </function>

  <function type="function" name="getAttributeValue" parameternames="node attrName" return="RemoteObjectLight">
    <![CDATA[
      if (node.getValue() != null) {
            def paramNames = new ArrayList();
            def paramValues = new ArrayList();

            paramNames.add("objectClassName");
            paramNames.add("objectId");
            paramNames.add("attributeName");

            paramValues.add(node.getValue().getClassName());
            paramValues.add(String.valueOf(node.getValue().getId()));
            paramValues.add(attrName);

            return scriptQueryExecutor.execute("getAttributeValue", paramNames, paramValues);
      };
      null;
    ]]>
  </function>
  <!-- -->
  <function type="function" name="getNewGridHardwareRow" parameternames="srcGrid trgGrid fieldModel modelClassName fieldVendor vendorClassName srcClm">
    <![CDATA[
      def oldRows = new ArrayList();

      if (trgGrid != null && trgGrid.getRows() != null) {
        oldRows = trgGrid.getRows();
      };
      def data = null;

      def state = null;
      def model = null;
      def vendor = null;

      if (srcGrid != null && srcGrid.getSelectedRow() != -1L) {
        def row = Integer.valueOf(String.valueOf(srcGrid.getSelectedRow()));
        def clm =  Integer.valueOf(srcClm);

        data = srcGrid.getData(row, clm);

        def attributes = data.getAttributes();

        if (attributes != null && !attributes.isEmpty()) {

          state = attributes.get(0).get(attributes, "state");
          model = attributes.get(0).get(attributes, "model");
          vendor = attributes.get(0).get(attributes, "vendor");

          def paramNames = new ArrayList();

          paramNames.add("objectClassName");
          paramNames.add("objectId");

          def paramValues = new ArrayList();

          if (state != null) {

            paramValues.add("OperationalState");
            paramValues.add(state);

            state = scriptQueryExecutor.execute("getObjectLight", paramNames, paramValues);
          };
          if (model != null) {

            paramValues.clear();

            paramValues.add(modelClassName);
            paramValues.add(model);

            model = scriptQueryExecutor.execute("getObjectLight", paramNames, paramValues);
          };
          if (vendor != null) {

            paramValues.clear();

            paramValues.add(vendorClassName);
            paramValues.add(vendor);

            vendor = scriptQueryExecutor.execute("getObjectLight", paramNames, paramValues);
          };
        };
      };

      if (data != null) {

        def newRow = new ArrayList();

        newRow.add(model != null ? model : "<Not Set>");
        newRow.add(vendor != null ? vendor : "<Not Set>");
        newRow.add(data != null ? data : "<Not Set>");
        newRow.add(state != null ? state : "<Not Set>");

        oldRows.add(newRow);
      } else {

        model = fieldModel.getValue();
        vendor = fieldVendor.getValue();

        if (model != null && vendor != null) {
          data = "";
          state = "To Buy";

          def newRow = new ArrayList();

          newRow.add(model);
          newRow.add(vendor);
          newRow.add(data);
          newRow.add(state);

          oldRows.add(newRow);
        };
      };
      oldRows;
    ]]>
  </function>

  <function type="function" name="filterHardware" parameternames="filterClassName fieldModel fieldVendor fieldState">
    <![CDATA[
      def paramNames = new ArrayList();
      def paramValues = new ArrayList();

      paramNames.add("className");
      paramValues.add(filterClassName);

      def elements = scriptQueryExecutor.execute("getObjectsOfClass", paramNames, paramValues);

      def filteredList = new ArrayList();

      def selectedModel = fieldModel.getValue();
      def selectedVendor = fieldVendor.getValue();
      def selectedState = fieldState.getValue();

      elements.each { element ->

        def filterVendor = false;
        def filterModel = false;
        def filterState = false;

        def attributes = element.getAttributes();

        if (attributes != null && !attributes.isEmpty()) {

          def model = attributes.get(0).get(attributes, "model");
          def vendor = attributes.get(0).get(attributes, "vendor");
          def state = attributes.get(0).get(attributes, "state");

          if (model != null) {
            if (selectedModel != null && model.equals(String.valueOf(selectedModel.getId()))) {
              filterModel = true;
            };
          };
          if (vendor != null) {
            if (selectedVendor != null && vendor.equals(String.valueOf(selectedVendor.getId()))) {
              filterVendor = true;
            };
          };
          if (state != null) {
            if (selectedState != null && state.equals(String.valueOf(selectedState.getId()))) {
              filterState = true;
            };
          };
        };

        if ((selectedModel == null ? true : filterModel) &&
            (selectedVendor == null ? true : filterVendor) &&
            (selectedState == null ? true : filterState)) {

          def filteredElement = new ArrayList();
          filteredElement.add(element);
          filteredList.add(filteredElement);
        };
      };
      filteredList;
    ]]>
  </function>

  <function type="function" name="detailedFilterHardware" parameternames="filterClassName fieldModel fieldVendor fieldState">
    <![CDATA[
      def paramNames = new ArrayList();
      def paramValues = new ArrayList();

      paramNames.add("className");
      paramValues.add(filterClassName);

      def elements = scriptQueryExecutor.execute("getObjectsOfClass", paramNames, paramValues);

      def filteredList = new ArrayList();

      def selectedModel = fieldModel.getValue();
      def selectedVendor = fieldVendor.getValue();
      def selectedState = fieldState.getValue();

      elements.each { element ->

        def filterVendor = false;
        def filterModel = false;
        def filterState = false;

        def attributes = element.getAttributes();

        if (attributes != null && !attributes.isEmpty()) {

          def model = attributes.get(0).get(attributes, "model");
          def vendor = attributes.get(0).get(attributes, "vendor");
          def state = attributes.get(0).get(attributes, "state");

          if (model != null) {
            if (selectedModel != null && model.equals(String.valueOf(selectedModel.getId()))) {
              filterModel = true;
            };
          };
          if (vendor != null) {
            if (selectedVendor != null && vendor.equals(String.valueOf(selectedVendor.getId()))) {
              filterVendor = true;
            };
          };
          if (state != null) {
            if (selectedState != null && state.equals(String.valueOf(selectedState.getId()))) {
              filterState = true;
            };
          };
        };

        if ((selectedModel == null ? true : filterModel) &&
            (selectedVendor == null ? true : filterVendor) &&
            (selectedState == null ? true : filterState)) {

          def filteredElement = new ArrayList();
          filteredElement.add(element);

          def paramNames1 = new ArrayList();
          def paramValues1 = new ArrayList();

          paramNames1.add("objClass");
          paramNames1.add("objId");
          paramNames1.add("objParentClass");
          /*
          paramValues1.add(element.getClassName());
          paramValues1.add(String.valueOf(element.getId()));
          paramValues1.add("Building");

          def building = scriptQueryExecutor.execute("getParentName", paramNames1, paramValues1);
          filteredElement.add(building);

          paramNames1.clear();
          paramValues1.clear();

          paramNames1.add("objClass");
          paramNames1.add("objId");
          paramNames1.add("objParentClass");
          */
          paramValues1.add(element.getClassName());
          paramValues1.add(String.valueOf(element.getId()));
          paramValues1.add("City");

          def city = scriptQueryExecutor.execute("getParentName", paramNames1, paramValues1);
          filteredElement.add(city);

          filteredList.add(filteredElement);
        };
      };
      filteredList;
    ]]>
  </function>
  <!--
  <function type="function" name="getSelectedRowGridDataValue" parameternames="grid colId">
    <![CDATA[
      if (grid != null && colId != null && grid.getSelectedRow() != -1L) {

        def row = Integer.valueOf(String.valueOf(grid.getSelectedRow()));
        def col = Integer.valueOf(colId);
        def data = grid.getData(row, col);

        return data;
      };
      null;
    ]]>
  </function>
  -->
  <function type="function" name="getRows" parameternames="activityId sharedGridId">
    <![CDATA[

      def paramNames = new ArrayList();

      paramNames.add("activityId");
      paramNames.add("sharedId");

      def paramValues = new ArrayList();

      paramValues.add(activityId);
      paramValues.add(sharedGridId + "rowscount");

      def strRowsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

      paramValues.clear();

      paramValues.add(activityId);
      paramValues.add(sharedGridId + "columnscount");

      def strColumnsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

      def res = new ArrayList();

      if (strRowsCount != null && strColumnsCount != null) {

        def rowscount = Integer.valueOf(strRowsCount);
        def columnscount = Integer.valueOf(strColumnsCount);

        for (int i = 0; i < rowscount; i++) {
          def lst = new ArrayList();

          for (int j = 0; j < columnscount; j++) {
            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j);

            def dataGrid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "datatype");

            def dataType = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            if ("RemoteObjectLight".equals(dataType)) {

              paramNames.clear();

              paramNames.add("activityId");
              paramNames.add("sharedId");

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "objectname");

              def objectname = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "objectId");

              def objectId = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "classid");

              def classid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramNames.clear();

              paramNames.add("classId");
              paramNames.add("objectId");

              paramValues.clear();

              paramValues.add(classid);
              paramValues.add(objectId);

              def rol = scriptQueryExecutor.execute("getObjectLightUsingClassId", paramNames, paramValues);

              lst.add(rol);
            } else {
              lst.add(dataGrid);
            };
          };
          res.add(lst);
        };
      };
      res;
    ]]>
  </function>
  <function type="function" name="getRowsInGridSaved" parameternames="activityId sharedGridId aGrid">
    <![CDATA[
      if (aGrid != null && aGrid.getRows() != null && !aGrid.getRows().isEmpty()) {
        return aGrid.getRows();
      };
      def paramNames = new ArrayList();

      paramNames.add("activityId");
      paramNames.add("sharedId");

      def paramValues = new ArrayList();

      paramValues.add(activityId);
      paramValues.add(sharedGridId + "rowscount");

      def strRowsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

      paramValues.clear();

      paramValues.add(activityId);
      paramValues.add(sharedGridId + "columnscount");

      def strColumnsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

      def res = new ArrayList();

      if (strRowsCount != null && strColumnsCount != null) {

        def rowscount = Integer.valueOf(strRowsCount);
        def columnscount = Integer.valueOf(strColumnsCount);

        for (int i = 0; i < rowscount; i++) {
          def lst = new ArrayList();

          for (int j = 0; j < columnscount; j++) {
            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j);

            def dataGrid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "datatype");

            def dataType = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            if ("RemoteObjectLight".equals(dataType)) {

              paramNames.clear();

              paramNames.add("activityId");
              paramNames.add("sharedId");

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "objectname");

              def objectname = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "objectId");

              def objectId = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "classid");

              def classid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramNames.clear();

              paramNames.add("classId");
              paramNames.add("objectId");

              paramValues.clear();

              paramValues.add(classid);
              paramValues.add(objectId);

              def rol = scriptQueryExecutor.execute("getObjectLightUsingClassId", paramNames, paramValues);

              lst.add(rol);
            } else {
              lst.add(dataGrid);
            };
          };
          res.add(lst);
        };
      };
      res;
    ]]>
  </function>

  <function type="function" name="getObjectChildrenRecursive" parameternames="src childClassName" return="RemoteObjectLight">
    <![CDATA[
      if (src.getValue() != null) {
        def paramNames = new ArrayList();
        def paramValues = new ArrayList();

        paramNames.add("parentClassName");
        paramNames.add("parentId");
        paramNames.add("childClassName");

        paramValues.add(src.getValue().getClassName());
        paramValues.add(String.valueOf(src.getValue().getId()));
        paramValues.add(childClassName);

        return scriptQueryExecutor.execute("getObjectChildrenRecursive", paramNames, paramValues);
      };
      null;
    ]]>
  </function>

  <function type="function" name="getFieldContacts" parameternames="customerField contactClass" return="RemoteObjectLight">
    <![CDATA[
      if (customerField.getValue() != null) {

        def paramNames = new ArrayList();
        def paramValues = new ArrayList();

        paramNames.add("objectClassName");
        paramNames.add("objectId");
        paramNames.add("attributeName");

        paramValues.add(customerField.getValue().getClassName());
        paramValues.add(String.valueOf(customerField.getValue().getId()));
        paramValues.add("contacts");

        def contacts = scriptQueryExecutor.execute("getSpecialAttribute", paramNames, paramValues);

        if (contacts != null) {

          def res = new ArrayList();

          contacts.each { contact ->
            if (contact.getClassName().equals(contactClass)) {
              res.add(contact);
            };
          };

          return res;
        };
      };
      null;
    ]]>
  </function>
  <!--Useful Functions-->
  <function type="function" name="getYesNoItems">
    <![CDATA[
      def items = new ArrayList();
      items.add("Yes");
      items.add("No");
      return items;
    ]]>
  </function>

  <function type="function" name="getValue" parameternames="aField" return="String">
    <![CDATA[
      def result = "";
      if (aField.getValue() != null)
          result = aField.getValue().toString();
      result;
    ]]>
  </function>
  <!-- Not used yet -->
  <function type="function" name="getContact" parameternames="provider contactType" >
    <![CDATA[

    def paramNames = new ArrayList();
    def paramValues = new ArrayList();

    paramNames.add("objectClassName");
    paramNames.add("objectId");
    paramNames.add("attributeName");

    paramValues.add(provider.getValue().getClassName());
    paramValues.add(String.valueOf(provider.getValue().getId()));
    paramValues.add("contacts");

    def contacts = scriptQueryExecutor.execute("getSpecialAttribute", paramNames, paramValues);

    def result = null;

    if (contacts != null && contacts.size() > 0) {

      contacts.each { contact ->
        if (contactType != null && contactType.equals(contact.getClassName()))
          result = contact;
      }

    } else
      def dummy = "dummy";
    result;

    ]]>
  </function>
  <!-- Creates a new contact asociated to the provider -->
  <function type="function" name="createContact" parameternames="contactType provider role name email cellphone availability language">
      <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.apis.persistence.util.StringPair;
      import java.util.ArrayList;

      def bem = PersistenceService.getInstance().getBusinessEntityManager();
      def properties = new ArrayList();
      properties.add(new StringPair("name", name.getValue()));
      properties.add(new StringPair("role", role.getValue()));
      properties.add(new StringPair("email1", email.getValue()));
      properties.add(new StringPair("cellphone", cellphone.getValue()));
      properties.add(new StringPair("availability", availability.getValue()));
      properties.add(new StringPair("language", language.getValue().getId().toString()));
      bem.createContact(contactType.getValue(), properties, provider.getValue().getClassName(), provider.getValue().getId());

      ]]>
    </function>

    <!-- Edits an existing contact -->
    <function type="function" name="editContact" parameternames="contact provider role name email cellphone availability language">
      <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.apis.persistence.util.StringPair;
      import java.util.ArrayList;

      def bem = PersistenceService.getInstance().getBusinessEntityManager();
      def properties = new ArrayList();
      if(name.getValue() != null)
        properties.add(new StringPair("name", name.getValue()));
      if(role.getValue() != null)
        properties.add(new StringPair("role", role.getValue()));
      if(email.getValue() != null)
        properties.add(new StringPair("email1", email.getValue()));
      if(cellphone.getValue() != null)
        properties.add(new StringPair("telephone1", cellphone.getValue()));
      if(availability.getValue() != null)
        properties.add(new StringPair("availability", availability.getValue()));
      if(language.getValue() != null)
        properties.add(new StringPair("language", String.valueOf(language.getValue().getId())));
      bem.updateContact(contact.getValue().getClassName(), contact.getValue().getId(), properties);

      ]]>
    </function>
    <!-- Retrieve the Contact Types available -->
    <function type="function" name="getContactTypes" queryname="getContactTypes">
        <![CDATA[
        def contactTypes = ['BillingContact', 'CommercialContact', 'TechnicalContact'];
        contactTypes;
        ]]>
    </function>
    <!-- Retrieve an object from a field -->
    <function type="function" name="getObject" queryname="getObject" parameternames="param">
        <![CDATA[
        def object = param.getValue();
        object;
        ]]>
    </function>
    <!-- Returns an object from an objectId, usefull when a ListType Object is needed outside the context -->
    <function type="function" name="getListTypeFromId" parameternames="className paramObjectId" return="Object">
    <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;

      if(paramObjectId.getValue()== null)
        return null;

      def aem = PersistenceService.getInstance().getApplicationEntityManager();
      def object = aem.getListTypeItem(className, Long.valueOf(paramObjectId.getValue()));

      object;
    ]]>
  </function>

  <!-- Updates the data related to a comboBox in order to see visually the effects of an edition task  -->
  <function type="function" name="updateCmbRelatedData" parameternames="comboBox">
      <![CDATA[
        import org.kuwaiba.apis.persistence.PersistenceService;

        def bem = PersistenceService.getInstance().getBusinessEntityManager();
        if(comboBox.getValue() != null)
          return bem.getObject(comboBox.getValue().getClassName(), comboBox.getValue().getId());
        null;
      ]]>
    </function>

  <!-- Add a previously selected equipment to the PurchaseObjects pool within the Virtual Warehouse
        Purchase Warehouse (InventoryObject)
        param equipmentType: a combobox holding the name of the new Equipment Type (EquipmentModel)
        param vendor: a combobox holding the name of the Vendor (EquipmentVendor) to be associated with
        the equipment.
        param quantity: how many instances will be created inside the pool
  -->
  <function type="function" name="purchaseEquipment" parameternames="equipmentType vendor quantity purchaseCode" return="">
    <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;
      import java.util.Date;

      def bem = PersistenceService.getInstance().getBusinessEntityManager();
      def aem = PersistenceService.getInstance().getApplicationEntityManager();
      def mem = PersistenceService.getInstance().getMetadataEntityManager();

      def pools = bem.getObjectsWithFilterLight("VirtualWarehouse", "acronym", "purchase");

      def purchasePools = aem.getPoolsInObject(pools.get(0).getClassName(), pools.get(0).getId(), "InventoryObject");

      def purchasePool = purchasePools.get(0);

      if (equipmentType.getValue() != null && vendor.getValue() != null && quantity.getValue() != null){
        def classEM = bem.getObjectsWithFilterLight("EquipmentModel", "name", equipmentType.getValue().getName());
        def equipmentClass = "";

        if(classEM.size() > 0){
          equipmentClass = bem.getAttributeValueAsString(classEM.get(0).getClassName(), classEM.get(0).getId(), "classToMap");
        };

        def stateList = bem.getObjectsWithFilterLight("OperationalState", "name", "Pending Shipment");
        def pendingShipmentStateId = stateList.get(0).getId();
        def hasVendor = mem.hasAttribute(equipmentClass, "vendor");
        def attributeNames = null;
        def attributeValues = null;

        for(def i = 0; i < Integer.valueOf(quantity.getValue()); i++){
          if(hasVendor){
            attributeNames = ["name", "state", "vendor", "purchaseCode"] as String[];
            def date = System.currentTimeMillis() + i;
            attributeValues = [equipmentClass + "_"+ date, String.valueOf(pendingShipmentStateId), String.valueOf(vendor.getValue().getId()), String.valueOf(purchaseCode.getValue())] as String[];
          };
          else{
            attributeNames = ["name", "state"] as String[];
            def date = System.currentTimeMillis() + i;
            attributeValues = [equipmentClass + "_"+ date, String.valueOf(pendingShipmentStateId)] as String[];
          };
          bem.createPoolItem(purchasePool.getId(), equipmentClass, attributeNames, attributeValues, 0);
        }
      };
      ]]>
  </function>

  <!-- Create a new EquipmentVendor ListType item
        param vendorName: a textfield holding the name of the new EquipmentVendor
  -->
  <function type="function" name="createVendor" parameternames="vendorName">
    <![CDATA[
    import org.kuwaiba.apis.persistence.PersistenceService;

    def aem = PersistenceService.getInstance().getApplicationEntityManager();
    def bem = PersistenceService.getInstance().getBusinessEntityManager();

    def newVendorId = null;

    if (vendorName.getValue() != null) {
      newVendorId = aem.createListTypeItem("EquipmentVendor", vendorName.getValue(), vendorName.getValue());
    };
    ]]>
  </function>

    <!-- Create a new EquipmentModel ListType item and associates it with the classToMap
         param equipmentName: a textfield holding the name of the new EquipmentModel
         param classToMap: a comboBox that holds the name of the class the new EquipmentModel needs
         to be associated with.
    -->
    <function type="function" name="createEquipmentModel" parameternames="equipmentName classToMap">
      <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;

      def aem = PersistenceService.getInstance().getApplicationEntityManager();
      def bem = PersistenceService.getInstance().getBusinessEntityManager();

      def newModelId = null;

      if (equipmentName.getValue() != null && classToMap.getValue() != null) {
        newModelId = aem.createListTypeItem("EquipmentModel", equipmentName.getValue(), equipmentName.getValue());
      };

      def newModel = bem.getObject("EquipmentModel", newModelId);
      def newModelAttr = bem.getAttributeValuesAsString(newModel.getClassName(), newModel.getId());
      newModelAttr.put("classToMap", classToMap.getValue().getClassName());
      bem.updateObject(newModel.getClassName(), newModel.getId(), newModelAttr);
      ]]>
    </function>

  <!-- Returns a list of all non abstract classes of type GenericCommunicationsElement, GenericBoard
         GenericDistributionFrame and GenericPhysicalLink.
         param subclassesFunction: a function that retrieves all subclasses of a single type
         in this case getSubClassesLight
    -->
    <function type="function" name="getAllEquipment" parameternames="subclassesFunction">
      <![CDATA[

        def allEquipment = new ArrayList();
        def genCommunicationElement = new ArrayList();
        def genBoard = new ArrayList();
        def genDistributionFrame = new ArrayList();
        def genPhysicalLink = new ArrayList();

        def parameterList = new ArrayList();

        if(subclassesFunction != null){
          parameterList.add("GenericCommunicationsElement");
          parameterList.add(String.valueOf(false));
          parameterList.add(String.valueOf(false));
          genCommunicationElement = subclassesFunction.run(parameterList);
          parameterList.clear();

          parameterList.add("GenericBoard");
          parameterList.add(String.valueOf(false));
          parameterList.add(String.valueOf(false));
          genBoard = subclassesFunction.run(parameterList);
          parameterList.clear();

          parameterList.add("GenericDistributionFrame");
          parameterList.add(String.valueOf(false));
          parameterList.add(String.valueOf(false));
          genDistributionFrame = subclassesFunction.run(parameterList);
          parameterList.clear();

          parameterList.add("GenericPhysicalLink");
          parameterList.add(String.valueOf(false));
          parameterList.add(String.valueOf(false));
          genPhysicalLink = subclassesFunction.run(parameterList);
          parameterList.clear();
        };

        genCommunicationElement.each{ element ->
          allEquipment.add(element);
        };

        genBoard.each{ element ->
          allEquipment.add(element);
        };

        genDistributionFrame.each{ element ->
          allEquipment.add(element);
        };

        genPhysicalLink.each{ element ->
          allEquipment.add(element);
        };

        allEquipment;

      ]]>
    </function>
    <!--
        description: Returns all the rows from a source grid
        parameter srcGrid: the grid that contains the elements to extract
        return list: contains a list o the rows from the source grid
    -->
    <function type="function" name="getRowsFromGrid" parameternames="srcGrid">
    <![CDATA[

      def list = new ArrayList();
      def rows = srcGrid.getRows();
      if(rows == null)
        rows = new ArrayList();
      list.add(rows);
      list;

    ]]>
  </function>
  <!--
      description: Returns the selected row of a grid to be aded to another grid
      parameter srcGrid: the grid that contains the element to add to the other grid
      parameter targetGrid: the grid that will add the row from srcGrid
  -->
  <function type="function" name="getMaterialRow" parameternames="srcGrid targetGrid">
  <![CDATA[

    def data = null;

    def name = null;
    def state = null;
    def rack = null;
    def building = null;
    def city = null;
    def list = targetGrid.getRows();
    if(list == null)
      list = new ArrayList();
    if (srcGrid != null && srcGrid.getSelectedRow() != -1L) {
      list.add(srcGrid.getRow());
    };
    list;

  ]]>
  </function>
  <!--
      description: Change equipmpent's operational state from Reserved to Spare
      parameter srcMaterial: a textfield that contains an object to be modified
  -->
  <function type="function" name="cancelReserveMaterial" parameternames="srcMaterial" return="RemoteObjectLight">
    <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;


      if (srcMaterial.getValue() != null) {
        def bem = PersistenceService.getInstance().getBusinessEntityManager();
        def aem = PersistenceService.getInstance().getApplicationEntityManager();
        def spareOpState = aem.getListTypeItem("OperationalState", "Spare");
        HashMap<String, String> attrs = new HashMap();
        attrs.put("state", String.valueOf(spareOpState.getId()));
        bem.updateObject(srcMaterial.getValue().getClassName(), srcMaterial.getValue().getId(), attrs);
      };
      srcMaterial;
    ]]>
  </function>
  <!--
      description: Change equipmpent's operational state from Spare to Reserved
      parameter srcGrid: the grid that contains the selected object to be reserved
  -->
  <function type="function" name="reserveMaterial" parameternames="srcGrid" return="RemoteObjectLight">
    <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;

      if (srcGrid != null && srcGrid.getSelectedRow() != -1L) {
        def bem = PersistenceService.getInstance().getBusinessEntityManager();
        def aem = PersistenceService.getInstance().getApplicationEntityManager();
        def reservedOpState = aem.getListTypeItem("OperationalState", "Reserved");
        HashMap<String, String> attrs = new HashMap();
        def objectList = srcGrid.getRow();

        attrs.put("state", String.valueOf(reservedOpState.getId()));

        bem.updateObject(objectList.get(0).getClassName(), objectList.get(0).getId(), attrs);
      };
      srcGrid;
    ]]>
  </function>
  <!-- This function is used to fill the ordered material with a status option -->
  <function type="function" name="getMaterialPreconfigurationStatus" parameternames="activityId sharedGridId" return="Matriz">
    <![CDATA[
    import org.kuwaiba.apis.persistence.PersistenceService;
    import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

    def aem = PersistenceService.getInstance().getApplicationEntityManager();
    def bem = PersistenceService.getInstance().getBusinessEntityManager();


    def paramNames = new ArrayList();

    paramNames.add("activityId");
    paramNames.add("sharedId");

    def paramValues = new ArrayList();

    paramValues.add(activityId);
    paramValues.add(sharedGridId + "rowscount");

    def strRowsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

    paramValues.clear();

    paramValues.add(activityId);
    paramValues.add(sharedGridId + "columnscount");

    def strColumnsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

    def res = new ArrayList();
    if (strRowsCount != null && strColumnsCount != null) {

      def rowscount = Integer.valueOf(strRowsCount);
      def columnscount = Integer.valueOf(strColumnsCount);

      for (int i = 0; i < rowscount; i++) {
        def lst = new ArrayList();

        for (int j = 0; j < columnscount; j++) {
          paramValues.clear();

          paramValues.add(activityId);
          paramValues.add(sharedGridId + i + j);

          def dataGrid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

          paramValues.clear();

          paramValues.add(activityId);
          paramValues.add(sharedGridId + i + j + "datatype");

          def dataType = scriptQueryExecutor.execute("shared", paramNames, paramValues);

          if ("RemoteObjectLight".equals(dataType)) {

            paramNames.clear();

            paramNames.add("activityId");
            paramNames.add("sharedId");

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "objectname");

            def objectname = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "objectId");

            def objectId = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "classid");

            def classid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramNames.clear();

            paramNames.add("classId");
            paramNames.add("objectId");

            paramValues.clear();

            paramValues.add(classid);
            paramValues.add(objectId);

            def rol = scriptQueryExecutor.execute("getObjectLightUsingClassId", paramNames, paramValues);

            lst.add(rol);
          } else {
            lst.add(dataGrid);
          };
        };
        res.add(lst);
      };
    };




    def originalData = res;

    def classSpare = new ArrayList();
    originalData.each{ instanceRow ->
      def classsInstances = new ArrayList();
      classsInstances.add(instanceRow.get(0));
      classsInstances.add("NO");
      classsInstances.add(instanceRow.get(1));
      classsInstances.add(instanceRow.get(2));
      classsInstances.add(instanceRow.get(3));
      classsInstances.add(instanceRow.get(4));
      classSpare.add(classsInstances);
    };

    classSpare;
    ]]>
  </function>

  <function type="function" name="getRowsInGridSavedPort" parameternames="activityId sharedGridId">
    <![CDATA[

      def paramNames = new ArrayList();

      paramNames.add("activityId");
      paramNames.add("sharedId");

      def paramValues = new ArrayList();

      paramValues.add(activityId);
      paramValues.add(sharedGridId + "rowscount");

      def strRowsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

      paramValues.clear();

      paramValues.add(activityId);
      paramValues.add(sharedGridId + "columnscount");

      def strColumnsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

      def res = new ArrayList();

      if (strRowsCount != null && strColumnsCount != null) {

        def rowscount = Integer.valueOf(strRowsCount);
        def columnscount = Integer.valueOf(strColumnsCount);

        for (int i = 0; i < rowscount; i++) {
          def lst = new ArrayList();

          for (int j = 0; j < columnscount; j++) {
            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j);

            def dataGrid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "datatype");

            def dataType = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            if ("RemoteObjectLight".equals(dataType)) {

              paramNames.clear();

              paramNames.add("activityId");
              paramNames.add("sharedId");

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "objectname");

              def objectname = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "objectId");

              def objectId = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "classid");

              def classid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramNames.clear();

              paramNames.add("classId");
              paramNames.add("objectId");

              paramValues.clear();

              paramValues.add(classid);
              paramValues.add(objectId);

              def rol = scriptQueryExecutor.execute("getObjectLightUsingClassId", paramNames, paramValues);

              lst.add(rol);
            } else {
              lst.add(dataGrid);
            };
          };
          res.add(lst);
        };
      };
      res;
    ]]>
  </function>

  <!-- Makes a list of lists that join information from 2 different shared grids
        param firstActivityId: the id of the first activity containing the grid needed
        param firstSharedGridId: the id of the grid needed from the first activity
        param secondActivityId: the id of the second activity containing the grid needed
        param secondSharedGridId: the id of the grid needed from the second activity
        param wrapperFunction: the name of a function that returns a list o lists(rows) of a grid
    -->
  <function type="function" name="getRowsInTwoGridsSaved" queryname="getRackObject" parameternames="firstActivityId firstSharedGridId secondActivityId secondSharedGridId wrapperFunction">
      <![CDATA[
      import org.kuwaiba.apis.forms.elements.ElementGrid;

      def functionParameters = new ArrayList();
      def firstMatrix = new ArrayList();
      def secondMatrix = new ArrayList();

      if(wrapperFunction != null){
        functionParameters.add(firstActivityId);
        functionParameters.add(firstSharedGridId);
        functionParameters.add(new ElementGrid());
        firstMatrix = wrapperFunction.run(functionParameters);
        functionParameters.clear();

        functionParameters.add(secondActivityId);
        functionParameters.add(secondSharedGridId);
        functionParameters.add(new ElementGrid());
        secondMatrix = wrapperFunction.run(functionParameters);
      };

      def resultList = new ArrayList();
      firstMatrix.each{ row ->
        resultList.add(row);
      };
      secondMatrix.each{ row ->
        resultList.add(row);
      };
      resultList;
      ]]>
  </function>

  <!-- This function is used to fill the data of a grid with ports with operational state 'Spare' -->
  <function type="function" name="getSparePorts" parameternames="activityId sharedGridId" return="Matriz">
    <![CDATA[
    import org.kuwaiba.apis.persistence.PersistenceService;
    import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

    def aem = PersistenceService.getInstance().getApplicationEntityManager();
    def bem = PersistenceService.getInstance().getBusinessEntityManager();


    def paramNames = new ArrayList();

    paramNames.add("activityId");
    paramNames.add("sharedId");

    def paramValues = new ArrayList();

    paramValues.add(activityId);
    paramValues.add(sharedGridId + "rowscount");

    def strRowsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

    paramValues.clear();

    paramValues.add(activityId);
    paramValues.add(sharedGridId + "columnscount");

    def strColumnsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

    def res = new ArrayList();

    if (strRowsCount != null && strColumnsCount != null) {

      def rowscount = Integer.valueOf(strRowsCount);
      def columnscount = Integer.valueOf(strColumnsCount);

      for (int i = 0; i < rowscount; i++) {
        def lst = new ArrayList();

        for (int j = 0; j < columnscount; j++) {
          paramValues.clear();

          paramValues.add(activityId);
          paramValues.add(sharedGridId + i + j);

          def dataGrid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

          paramValues.clear();

          paramValues.add(activityId);
          paramValues.add(sharedGridId + i + j + "datatype");

          def dataType = scriptQueryExecutor.execute("shared", paramNames, paramValues);

          if ("RemoteObjectLight".equals(dataType)) {

            paramNames.clear();

            paramNames.add("activityId");
            paramNames.add("sharedId");

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "objectname");

            def objectname = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "objectId");

            def objectId = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "classid");

            def classid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramNames.clear();

            paramNames.add("classId");
            paramNames.add("objectId");

            paramValues.clear();

            paramValues.add(classid);
            paramValues.add(objectId);

            def rol = scriptQueryExecutor.execute("getObjectLightUsingClassId", paramNames, paramValues);

            lst.add(rol);
          } else {
            lst.add(dataGrid);
          };
        };
        res.add(lst);
      };
    };




    def originalData = res;

    def classsInstances = new ArrayList();
    originalData.each{ instanceRow ->
      classsInstances.add(instanceRow.get(0));
    };

    def classSpare = new ArrayList();
    def locationsArray = new ArrayList();

    classsInstances.each { instance ->
        def sons = bem.getChildrenOfClassLightRecursive(instance.getId(), instance.getClassName(), "GenericPhysicalPort", -1);
        sons.each { son ->

          def sonStatus = bem.getAttributeValueAsString(son.getClassName(), son.getId(), "state");

            if(sonStatus != null && sonStatus == "Spare"){
              def row = new ArrayList();
              row.add(new RemoteObjectLight(son));

              row.add(instance.getName());

              locationsArray = bem.getParentsUntilFirstOfClass(instance.getClassName(), instance.getId(), "City");

              def position = 0;
              def fieldObject = bem.getObject(instance.getClassName(), instance.getId());
              def positionRecieved = fieldObject.getAttributes().get("position");
              if(positionRecieved != null)
                position = positionRecieved;
              row.add(position);

              def rack = null;
              def city = "";
              def building = "";
              locationsArray.each { location ->
                switch(location.getClassName()){
                case "Rack":
                  rack = new RemoteObjectLight(location);
                  break;

                case "Building":
                  building = location.getName();
                  break;

                case "City":
                  city = location.getName();
                  break;
                default:
                  break;
                };
              };
              if(rack != null)
                row.add(rack);
              else
                row.add("");
              row.add(building);
              row.add(city);

              classSpare.add(row);
              locationsArray.clear();
            };


        };
      };

    classSpare;
    ]]>
  </function>

  <!-- This function is used to fill the data of a grid with links with operational state 'Spare' -->
  <function type="function" name="getSpareLinks" parameternames="cmbId" return="Matriz">
    <![CDATA[
    import org.kuwaiba.apis.persistence.PersistenceService;
    import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

    def aem = PersistenceService.getInstance().getApplicationEntityManager();
    def bem = PersistenceService.getInstance().getBusinessEntityManager();

    def classsInstances = bem.getObjectsOfClass(cmbId, -1);

    def classSpare = new ArrayList();

    classsInstances.each { instance ->
        def equipmentStatusId = instance.getAttributes().get("state");
        if(equipmentStatusId != null){
          def equipmentStatus = aem.getListTypeItem("OperationalState", equipmentStatusId as long);
          if(equipmentStatus != null && equipmentStatus.getName() == "Spare"){
            def row = new ArrayList();
            row.add(new RemoteObjectLight(instance));
            def fieldObject = bem.getObject(instance.getClassName(), instance.getId());
            def currentLength = fieldObject.getAttributes().get("currentLength");
            def totalLength = fieldObject.getAttributes().get("totalLength");
            row.add(currentLength);
            row.add(totalLength);
            classSpare.add(row);
          };
        };
    };

    classSpare;
    ]]>
  </function>

  <!-- This function is used to fill the data of a grid with elements with operational state 'Spare' -->
  <function type="function" name="getElements" parameternames="cmbId" return="Matriz">
    <![CDATA[
    import org.kuwaiba.apis.persistence.PersistenceService;
    import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

    def aem = PersistenceService.getInstance().getApplicationEntityManager();
    def bem = PersistenceService.getInstance().getBusinessEntityManager();

    def classsInstances = bem.getObjectsOfClass(cmbId.getValue(), -1);

    def classSpare = new ArrayList();
    def locationsArray = new ArrayList();

    classsInstances.each { instance ->
        def equipmentStatusId = instance.getAttributes().get("state");
        if(equipmentStatusId != null){
          def equipmentStatus = aem.getListTypeItem("OperationalState", equipmentStatusId as long);
          if(equipmentStatus != null && equipmentStatus.getName() == "Spare"){
            def row = new ArrayList();
            row.add(new RemoteObjectLight(instance));

            locationsArray = bem.getParentsUntilFirstOfClass(instance.getClassName(), instance.getId(), "City");

            def position = 0;
            def fieldObject = bem.getObject(instance.getClassName(), instance.getId());
            def positionRecieved = fieldObject.getAttributes().get("position");
            if(positionRecieved != null)
              position = positionRecieved;
            row.add(position);

            def rack = null;
            def city = "";
            def building = "";
            locationsArray.each { location ->
              switch(location.getClassName()){
              case "Rack":
                rack = new RemoteObjectLight(location);
                break;

              case "Building":
                building = location.getName();
                break;

              case "City":
                city = location.getName();
                break;
              default:
                break;
              };
            };
            if(rack != null)
              row.add(rack);
            else
              row.add("");
            row.add(building);
            row.add(city);

            classSpare.add(row);
            locationsArray.clear();
          }
        }
    };

    classSpare;
    ]]>
  </function>

</script>
